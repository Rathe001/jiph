'use strict';

var app = angular.module('app', ['modTemplates', 'modAutomation', 'modCampaigns', 'modAdSets', 'modAds', 'modCommon', 'modDashboard', 'modHelp', 'modAdGroups', 'modAudiences', 'modTracking']);

app.config(['$routeProvider', '$locationProvider', '$httpProvider', function ($routeProvider, $locationProvider, $httpProvider) {
    $routeProvider
    /* Dashboard */
    // Dashboard
    .when('/', {
        templateUrl: '/js/app/dashboard/controllers/dashboard/dashboard.html',
        controller: 'ctrlDashboard',
        controllerAs: 'vm'
    })
    /* Campaigns */
    // Campaigns
    .when('/campaigns', {
        templateUrl: '/js/app/campaigns/controllers/campaigns/campaigns.html',
        controller: 'ctrlCampaigns',
        controllerAs: 'vm'
    })
    // Create
    .when('/campaigns/create', {
        templateUrl: '/js/app/campaigns/controllers/create/create.html',
        controller: 'ctrlCampaignsCreate',
        controllerAs: 'vm'
    })
    // Edit
    .when('/campaigns/:campaignId', {
        templateUrl: '/js/app/campaigns/controllers/edit-create/edit-create.html',
        controller: 'ctrlCampaignsEditCreate',
        controllerAs: 'vm'
    })
    // Ad sets of campaign
    .when('/campaigns/:campaignId/ad-sets', {
        templateUrl: '/js/app/ad-sets/controllers/ad-sets/ad-sets.html',
        controller: 'ctrlAdSets',
        controllerAs: 'vm'
    })
    // Edit ad set
    .when('/ad-sets/:adSetId', {
        templateUrl: '/js/app/ad-sets/controllers/edit-create/edit-create.html',
        controller: 'ctrlAdSetsCreateEdit',
        controllerAs: 'vm'
    })
    // Ads of campaign
    .when('/campaigns/:campaignId/ads', {
        templateUrl: '/js/app/ads/controllers/ads/ads.html',
        controller: 'ctrlAds',
        controllerAs: 'vm'
    })
    // Ads of ad set
    .when('/campaigns/:campaignId/ad-sets/:adSetId/ads', {
        templateUrl: '/js/app/ads/controllers/ads/ads.html',
        controller: 'ctrlAds',
        controllerAs: 'vm'
    })
    // Edit ad
    .when('/ads/:adId', {
        templateUrl: '/js/app/ads/controllers/edit-create/edit-create.html',
        controller: 'ctrlAdsCreateEdit',
        controllerAs: 'vm'
    })
    /* Automation */
    .when('/automation', {
        templateUrl: '/js/app/automation/controllers/automation/automation.html',
        controller: 'ctrlAutomation',
        controllerAs: 'vm'
    })
    /* Help */
    .when('/help', {
        templateUrl: '/js/app/help/controllers/help/help.html',
        controller: 'ctrlHelp',
        controllerAs: 'vm'
    })
    /* Ad groups */
    .when('/ad-groups', {
        templateUrl: '/js/app/ad-groups/controllers/ad-groups/ad-groups.html',
        controller: 'ctrlAdGroups',
        controllerAs: 'vm'
    })
    // Create
    .when('/ad-groups/create', {
        templateUrl: '/js/app/ad-groups/controllers/create-edit/create-edit.html',
        controller: 'ctrlAdGroupsCreateEdit',
        controllerAs: 'vm'
    })
    // Edit
    .when('/ad-groups/:adGroupId', {
        templateUrl: '/js/app/ad-groups/controllers/create-edit/create-edit.html',
        controller: 'ctrlAdGroupsCreateEdit',
        controllerAs: 'vm'
    })
    /* Audiences */
    .when('/audiences', {
        templateUrl: '/js/app/audiences/controllers/audiences/audiences.html',
        controller: 'ctrlAudiences',
        controllerAs: 'vm'
    })
    // Create
    .when('/audiences/create', {
        templateUrl: '/js/app/audiences/controllers/create-edit/create-edit.html',
        controller: 'ctrlAudiencesCreateEdit',
        controllerAs: 'vm'
    })
    // Edit
    .when('/audiences/:audienceId', {
        templateUrl: '/js/app/audiences/controllers/create-edit/create-edit.html',
        controller: 'ctrlAudiencesCreateEdit',
        controllerAs: 'vm'
    })
    /* Tracking */
    .when('/tracking', {
        templateUrl: '/js/app/tracking/controllers/tracking/tracking.html',
        controller: 'ctrlTracking',
        controllerAs: 'vm'
    }).otherwise({
        redirectTo: '/'
    });

    $locationProvider.html5Mode(true).hashPrefix('!');
    $httpProvider.defaults.headers.common['Content-Type'] = 'application/json';
    $httpProvider.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';

    // IE AJAX caching fix
    if (!$httpProvider.defaults.headers.get) {
        $httpProvider.defaults.headers.get = {};
    }

    // Disable IE ajax request caching
    $httpProvider.defaults.headers.get['If-Modified-Since'] = 'Mon, 26 Jul 1997 05:00:00 GMT';
}]);

app.run(['$window', 'Facebook', 'User', 'Accounts', function ($window, Facebook, User, Accounts) {
    $window.fbAsyncInit = function () {
        // Executed when the SDK is loaded

        FB.init({
            appId: '444109322439343',
            //appId: '444116655771943',
            status: true,
            cookie: true,
            xfbml: true,
            version: 'v2.5'
        });

        Facebook.getLoginStatus().then(function (loginInfo) {
            if (loginInfo.status === 'connected') {
                var accountId = $window.localStorage.getItem("activeAccountId");

                if (accountId) {
                    Accounts.active = accountId;
                }

                Facebook.get('/me', {
                    fields: 'id,name,first_name,last_name,picture'
                }).then(function (userInfo) {
                    User.setUserInfo(loginInfo.authResponse, userInfo);
                });

                Accounts.getAll(loginInfo.authResponse.userID).then(function () {
                    if (!Accounts.all.find(function (account) {
                        return account.id === Accounts.active;
                    })) {
                        Accounts.setActive("");
                    }
                });
            }
        });
    };

    /* Load SDK */
    (function (d, s, id) {
        var js,
            fjs = d.getElementsByTagName(s)[0];
        if (d.getElementById(id)) {
            return;
        }
        js = d.createElement(s);js.id = id;
        js.src = "//connect.facebook.net/en_US/sdk.js";
        fjs.parentNode.insertBefore(js, fjs);
    })(document, 'script', 'facebook-jssdk');
}]);
'use strict';

var modCommon = angular.module('modCommon', ['ngRoute', 'ngSanitize', 'ngAnimate']);
'use strict';

var modAutomation = angular.module('modAutomation', []);
'use strict';

var modCampaigns = angular.module('modCampaigns', []);
'use strict';

var modAdSets = angular.module('modAdSets', []);
'use strict';

var modAds = angular.module('modAds', []);
'use strict';

var modDashboard = angular.module('modDashboard', []);
'use strict';

var modHelp = angular.module('modHelp', []);
'use strict';

var modAdGroups = angular.module('modAdGroups', []);
'use strict';

var modAudiences = angular.module('modAudiences', []);
'use strict';

var modTracking = angular.module('modTracking', []);
'use strict';

angular.module('modAdGroups').factory('AdGroups', ['$http', '$q', '$window', 'Loading', 'Api', function ($http, $q, $window, Loading, Api) {
    var service = {};

    service.getAll = getAll;

    return service;

    function getAll(facebookAdAccountId) {
        var url = Api.path + "/adGroups";

        Loading.set(true, url);
        return $http.get(url).then(function (success) {
            Loading.set(false, url);
            return success;
        }, function (error) {
            Loading.set(false, url);
            return $q.reject(error);
        });
    }
}]);
'use strict';

angular.module('modAdSets').factory('AdSets', ['$q', '$window', 'Loading', function ($q, $window, Loading) {
    var service = {};

    var defaultDataColumns = {
        name: true,
        id: false,
        adlabels: false,
        adset_schedule: false,
        account_id: false,
        bid_amount: true,
        bid_info: true,
        billing_event: true,
        campaign: false,
        campaign_id: false,
        configured_status: false,
        created_time: false,
        creative_sequence: false,
        effective_status: true,
        end_time: true,
        frequency_cap: false,
        frequency_cap_reset_period: false,
        is_autobid: true,
        lifetime_frequency_cap: false,
        lifetime_imps: false,
        optimization_goal: true,
        product_ad_behavior: false,
        promoted_object: false,
        rf_prediction_id: false,
        rtb_flag: false,
        start_time: true,
        targeting: false,
        updated_time: false,
        use_new_app_click: false,
        pacing_type: false,
        budget_remaining: true,
        daily_budget: true,
        lifetime_budget: true
    };

    service.active = "";

    service.get = get;
    service.getAll = getAll;
    service.getDataColumns = getDataColumns;
    service.setDataColumns = setDataColumns;

    return service;

    function get(adSetId, date_preset) {
        var deferred = $q.defer();
        var url = "";
        var payload = {
            fields: 'name,id,insights.date_preset(' + date_preset + '),adlabels,adset_schedule,account_id,bid_amount,bid_info,billing_event,campaign{id,name},campaign_id,configured_status,created_time,creative_sequence,effective_status,end_time,frequency_cap,frequency_cap_reset_period,is_autobid,lifetime_frequency_cap,lifetime_imps,optimization_goal,product_ad_behavior,promoted_object,rf_prediction_id,rtb_flag,start_time,targeting,updated_time,use_new_app_click,pacing_type,budget_remaining,daily_budget,lifetime_budget',
            limit: 5000
        };

        Loading.set(true, 'facebookrequest');
        FB.api('/' + adSetId, payload, function (response) {
            if (!response || response.error) {
                Loading.set(false, 'facebookrequest');
                deferred.reject(response.error);
            } else {
                Loading.set(false, 'facebookrequest');
                deferred.resolve(response);
            }
        });
        return deferred.promise;
    }

    function getAll(facebookAdAccountId, date_preset, campaignId) {
        var deferred = $q.defer();
        var url = "";
        var payload = {
            fields: 'name,id,insights.date_preset(' + date_preset + '),adlabels,adset_schedule,account_id,bid_amount,bid_info,billing_event,campaign{id,name},campaign_id,configured_status,created_time,creative_sequence,effective_status,end_time,frequency_cap,frequency_cap_reset_period,is_autobid,lifetime_frequency_cap,lifetime_imps,optimization_goal,product_ad_behavior,promoted_object,rf_prediction_id,rtb_flag,start_time,targeting,updated_time,use_new_app_click,pacing_type,budget_remaining,daily_budget,lifetime_budget',
            limit: 5000
        };

        if (!campaignId) url = '/' + facebookAdAccountId + '/adsets';
        if (campaignId) url = '/' + campaignId + '/adsets';

        Loading.set(true, 'facebookrequest');
        FB.api(url, payload, function (response) {
            if (!response || response.error) {
                Loading.set(false, 'facebookrequest');
                deferred.reject(response.error);
            } else {
                Loading.set(false, 'facebookrequest');
                deferred.resolve(response);
            }
        });
        return deferred.promise;
    }

    function getDataColumns() {
        var columns = JSON.parse($window.localStorage.getItem("adSetColumns"));

        if (!columns) columns = defaultDataColumns;

        return columns;
    }

    function setDataColumns(columns) {
        $window.localStorage.setItem("adSetColumns", JSON.stringify(columns));
    }
}]);
'use strict';

angular.module('modAds').factory('Ads', ['$q', '$window', 'Loading', function ($q, $window, Loading) {
    var service = {};

    var defaultDataColumns = {
        id: false,
        name: true,
        account_id: false,
        adset: false,
        campaign: false,
        adlabels: false,
        adset_id: false,
        bid_amount: true,
        bid_info: true,
        bid_type: true,
        configured_status: true,
        conversion_specs: false,
        created_time: false,
        creative: false,
        effective_status: true,
        last_updated_by_app_id: false,
        tracking_specs: false,
        updated_time: false,
        campaign_id: false,
        ad_review_feedback: false
    };

    service.getAll = getAll;
    service.getDataColumns = getDataColumns;
    service.setDataColumns = setDataColumns;

    return service;

    function getAll(facebookAdAccountId, date_preset, campaignId, adSetId) {
        var deferred = $q.defer();
        var url = "";
        var payload = {
            fields: 'id,name,insights.date_preset(' + date_preset + '),account_id,adset{id,name},campaign{id,name},adlabels,adset_id,bid_amount,bid_info,bid_type,configured_status,conversion_specs,created_time,creative,effective_status,last_updated_by_app_id,tracking_specs,updated_time,campaign_id,ad_review_feedback',
            limit: 5000
        };

        if (campaignId) url = '/' + campaignId + '/ads';
        if (adSetId) url = '/' + adSetId + '/ads';

        Loading.set(true, 'facebookrequest');
        FB.api(url, payload, function (response) {
            if (!response || response.error) {
                Loading.set(false, 'facebookrequest');
                deferred.reject(response.error);
            } else {
                Loading.set(false, 'facebookrequest');
                deferred.resolve(response);
            }
        });
        return deferred.promise;
    }

    function getDataColumns() {
        var columns = JSON.parse($window.localStorage.getItem("adColumns"));

        if (!columns) columns = defaultDataColumns;

        return columns;
    }

    function setDataColumns(columns) {
        $window.localStorage.setItem("adColumns", JSON.stringify(columns));
    }
}]);
'use strict';

angular.module('modAudiences').factory('Audiences', ['$http', '$q', '$window', 'Loading', 'Api', function ($http, $q, $window, Loading, Api) {
    var service = {};

    service.getAll = getAll;
    service.create = create;
    service.update = update;
    service.remove = remove;

    return service;

    function create(payload) {
        var url = Api.path + "/audiences";

        Loading.set(true, url);
        return $http.post(url, payload).then(function (success) {
            Loading.set(false, url);
            return success;
        }, function (error) {
            Loading.set(false, url);
            return $q.reject(error);
        });
    }

    function getAll(facebookAdAccountId) {
        var url = Api.path + "/audiences";

        Loading.set(true, url);
        return $http.get(url).then(function (success) {
            Loading.set(false, url);
            return success;
        }, function (error) {
            Loading.set(false, url);
            return $q.reject(error);
        });
    }

    function update(payload) {
        var url = Api.path + "/audiences";

        Loading.set(true, url);
        return $http.put(url, payload).then(function (success) {
            Loading.set(false, url);
            return success;
        }, function (error) {
            Loading.set(false, url);
            return $q.reject(error);
        });
    }

    function remove() {
        var url = Api.path + "/audiences";

        Loading.set(true, url);
        return $http.delete(url).then(function (success) {
            Loading.set(false, url);
            return success;
        }, function (error) {
            Loading.set(false, url);
            return $q.reject(error);
        });
    }
}]);
'use strict';

angular.module('modCampaigns').factory('Campaigns', ['$q', '$window', 'Loading', function ($q, $window, Loading) {
    var service = {};

    var defaultDataColumns = {
        account_id: false,
        actions: false,
        adlabels: false,
        app_store_clicks: false,
        buying_type: false,
        call_to_action_clicks: false,
        can_use_spend_cap: true,
        card_views: false,
        configured_status: false,
        cost_per_action_type: false,
        cost_per_inline_link_click: false,
        cost_per_inline_post_engagement: false,
        cost_per_total_action: false,
        cost_per_unique_action_type: false,
        cost_per_unique_click: false,
        cpm: false,
        cpp: false,
        created_time: false,
        ctr: true,
        date_start: true,
        date_stop: true,
        deeplink_clicks: false,
        effective_status: false,
        estimated_ad_recall_rate: false,
        estimated_ad_recall_rate_lower_bound: false,
        estimated_ad_recall_rate_upper_bound: false,
        frequency: false,
        id: false,
        impressions: true,
        inline_link_clicks: false,
        inline_post_engagement: false,
        objective: false,
        reach: true,
        social_clicks: false,
        social_impressions: false,
        social_reach: false,
        spend: false,
        spend_cap: false,
        start_time: false,
        stop_time: false,
        total_action_value: false,
        total_actions: false,
        total_unique_actions: false,
        unique_actions: false,
        unique_clicks: false,
        unique_ctr: false,
        unique_impressions: false,
        unique_link_clicks_ctr: false,
        unique_social_clicks: false,
        unique_social_impressions: false,
        updated_time: false,
        website_clicks: false,
        website_ctr: false
    };

    service.active = "";

    service.get = get;
    service.getAll = getAll;
    service.getDataColumns = getDataColumns;
    service.setDataColumns = setDataColumns;

    return service;

    function get(campaignId, date_preset) {
        var deferred = $q.defer();
        var payload = {
            fields: 'name,insights.date_preset(' + date_preset + '),id,adlabels,account_id,buying_type,can_use_spend_cap,configured_status,created_time,effective_status,objective,start_time,stop_time,updated_time,spend_cap',
            limit: 5000
        };

        Loading.set(true, 'facebookrequest');
        FB.api('/' + campaignId, payload, function (response) {
            if (!response || response.error) {
                Loading.set(false, 'facebookrequest');
                deferred.reject(response.error);
            } else {
                Loading.set(false, 'facebookrequest');
                deferred.resolve(response);
            }
        });
        return deferred.promise;
    }

    function getAll(facebookAdAccountId, date_preset) {
        var deferred = $q.defer();
        var payload = {
            fields: 'name,insights.date_preset(' + date_preset + '),id,adlabels,account_id,buying_type,can_use_spend_cap,configured_status,created_time,effective_status,objective,start_time,stop_time,updated_time,spend_cap',
            limit: 5000
        };

        Loading.set(true, 'facebookrequest');
        FB.api('/' + facebookAdAccountId + '/campaigns', payload, function (response) {
            if (!response || response.error) {
                Loading.set(false, 'facebookrequest');
                deferred.reject(response.error);
            } else {
                Loading.set(false, 'facebookrequest');
                deferred.resolve(response);
            }
        });
        return deferred.promise;
    }

    function getDataColumns() {
        var columns = JSON.parse($window.localStorage.getItem("campaignColumns"));

        if (!columns) columns = defaultDataColumns;

        return columns;
    }

    function setDataColumns(columns) {
        $window.localStorage.setItem("campaignColumns", JSON.stringify(columns));
    }
}]);
'use strict';

angular.module('modCampaigns').factory('Objectives', [function () {
    var service = {};

    service.all = [{
        id: "CANVAS_APP_ENGAGEMENT",
        name: "",
        shortDesc: "",
        longDesc: "",
        icon: "",
        enabled: false
    }, {
        id: "CANVAS_APP_INSTALLS",
        name: "",
        shortDesc: "",
        longDesc: "",
        icon: "",
        enabled: false
    }, {
        id: "CONVERSIONS",
        name: "Website Conversions",
        shortDesc: "Send people to your website to take a specific action, like signing up for a newsletter. Use a pixel to measure your conversions.",
        longDesc: "Use the 'website conversions' objective to promote conversions on your website.",
        icon: "fa-globe",
        enabled: true
    }, {
        id: "EVENT_RESPONSES",
        name: "Event Responses",
        shortDesc: "Promote your Facebook event to increase your attendance.",
        longDesc: "Use the 'event responses' objective to get more people to see and respond to your event.",
        icon: "fa-calendar-check-o",
        enabled: true
    }, {
        id: "EXTERNAL",
        name: "",
        shortDesc: "",
        longDesc: "",
        icon: "",
        enabled: false
    }, {
        id: "LEAD_GENERATION",
        name: "",
        shortDesc: "",
        longDesc: "",
        icon: "",
        enabled: false
    }, {
        id: "LINK_CLICKS",
        name: "Clicks to Website",
        shortDesc: "Increase the number of visits to your website.",
        longDesc: "Use the 'clicks to website' objective to send people to your website.",
        icon: "fa-mouse-pointer",
        enabled: true
    }, {
        id: "LOCAL_AWARENESS",
        name: "Local Awareness",
        shortDesc: "Promote your business to people who are nearby.",
        longDesc: "Use the 'local awareness' objective to reach people near your business.",
        icon: "fa-map-marker",
        enabled: true
    }, {
        id: "MOBILE_APP_ENGAGEMENT",
        name: "App Engagement",
        shortDesc: "Get more people to use your Facebook or mobile app.",
        longDesc: "Use the 'app engagement' objective to increase engagement in your app.",
        icon: "fa-gamepad",
        enabled: true
    }, {
        id: "MOBILE_APP_INSTALLS",
        name: "App Installs",
        shortDesc: "Send people to the store where they can purchase your app.",
        longDesc: "Use the 'app installs' objective to get people to install your app.",
        icon: "fa-cube",
        enabled: true
    }, {
        id: "OFFER_CLAIMS",
        name: "Offer Claims",
        shortDesc: "Promote timely discounts or other deals for people to claim in your store.",
        longDesc: "Use the 'offer claims' objective to promote your offer.",
        icon: "fa-money",
        enabled: true
    }, {
        id: "PAGE_LIKES",
        name: "Page Likes",
        shortDesc: "Connect more people with your page.",
        longDesc: "Use the 'page likes' objective to promote your Facebook page.",
        icon: "fa-thumbs-o-up",
        enabled: true
    }, {
        id: "POST_ENGAGEMENT",
        name: "Page Post Engagement",
        shortDesc: "Get more people to see and engage with your Page posts.",
        longDesc: "Use the 'page post engagement' objective to boost your post.",
        icon: "fa-comment",
        enabled: true
    }, {
        id: "PRODUCT_CATALOG_SALES",
        name: "",
        shortDesc: "",
        longDesc: "",
        icon: "",
        enabled: false
    }, {
        id: "VIDEO_VIEWS",
        name: "Video Views",
        shortDesc: "Promote videos that show behind-the-scenes footage, product launches or customer stories to raise awareness about your brand.",
        longDesc: "Use the 'video views' objective to get people to watch your video.",
        icon: "fa-video-camera",
        enabled: true
    }];

    return service;
}]);
'use strict';

var modDashboard = angular.module('modDashboard');

modDashboard.factory('Dashboard', ['$q', 'Loading', function ($q, Loading) {
    var service = {};

    service.generateReport = generateReport;
    service.checkReportStatus = checkReportStatus;
    service.fetchAsyncReport = fetchAsyncReport;

    return service;

    function generateReport(facebookAdAccountId, since, until) {
        var deferred = $q.defer();
        Loading.set(true, 'facebookrequest');
        FB.api('/' + facebookAdAccountId + '/insights', 'post', {
            time_increment: 1,
            level: 'campaign',
            time_range: {
                since: since,
                until: until
            },
            fields: 'spend,impressions,reach',
            default_summary: true
        }, function (response) {
            if (!response || response.error) {
                Loading.set(false, 'facebookrequest');
                deferred.reject(response.error);
            } else {
                Loading.set(false, 'facebookrequest');
                deferred.resolve(response);
            }
        });
        return deferred.promise;
    }

    function checkReportStatus(asyncReportId) {
        // Loading is handled in controller due to timeout delay
        var deferred = $q.defer();
        FB.api('/' + asyncReportId, function (response) {
            if (!response || response.error) {
                deferred.reject(response.error);
            } else {
                deferred.resolve(response);
            }
        });
        return deferred.promise;
    }

    function fetchAsyncReport(asyncReportId) {
        Loading.set(true, 'facebookrequest');
        var deferred = $q.defer();
        FB.api('/' + asyncReportId + '/insights', function (response) {
            if (!response || response.error) {
                Loading.set(false, 'facebookrequest');
                deferred.reject(response.error);
            } else {
                Loading.set(false, 'facebookrequest');
                deferred.resolve(response);
            }
        });
        return deferred.promise;
    }
}]);
'use strict';

var modAdGroups = angular.module('modAdGroups');

modAdGroups.controller('ctrlAdGroups', ['$scope', 'Accounts', 'Dictionary', 'AdGroups', function ($scope, Accounts, Dictionary, AdGroups) {
    var vm = this;

    vm.adGroups = [];
    vm.dictionary = {};
    vm.orderBy = "";
    vm.error = "";

    vm.toggleOrderBy = toggleOrderBy;

    $scope.$watch(function () {
        return Accounts.active;
    }, function (newVal) {
        if (newVal) {
            _getAll();
        }
    });

    _init();

    function _init() {
        vm.dictionary = Dictionary;
    }

    function _getAll() {
        vm.adGroups = [];
        vm.error = "";

        AdGroups.getAll(Accounts.active).then(function (response) {
            if (response.data.length > 0) {
                vm.adGroups = _processResponse(response.data);
            }
        }, function (error) {
            vm.error = error.data;
        });
    }

    function _processResponse(input) {
        var output = input;

        return output;
    }

    function toggleOrderBy(col) {
        if (vm.orderBy === col) {
            if (col[0] === "-") {
                vm.orderBy.replace("-", "");
            } else {
                vm.orderBy = "-" + col;
            }
        } else {
            vm.orderBy = col;
        }
    }
}]);
'use strict';

var modAds = angular.module('modAds');

modAds.controller('ctrlAds', ['$scope', '$routeParams', 'AdSets', 'Ads', 'Accounts', 'Currency', 'Dictionary', 'DateIntervals', 'Campaigns', function ($scope, $routeParams, AdSets, Ads, Accounts, Currency, Dictionary, DateIntervals, Campaigns) {
    var vm = this;
    var campaignId = $routeParams.campaignId;
    var adSetId = $routeParams.adSetId;

    vm.ads = [];
    vm.columns = {};
    vm.dictionary = {};
    vm.currency = {};
    vm.orderBy = "";
    vm.error = "";
    vm.dateIntervals = [];
    vm.selectedInterval = "";
    vm.campaign = {};
    vm.adSet = {};

    vm.toggleColumn = toggleColumn;
    vm.toggleOrderBy = toggleOrderBy;
    vm.selectInterval = selectInterval;

    $scope.$watch(function () {
        return Accounts.active + vm.selectedInterval;
    }, function (newVal) {
        if (newVal) {
            _getAll();
            if (campaignId) {
                _getCampaign();
            }
            if (adSetId) {
                _getAdSet();
            }
        }
    });

    _init();

    function _init() {
        vm.currency = Currency;
        vm.dictionary = Dictionary;
        vm.columns = Ads.getDataColumns();
        vm.dateIntervals = DateIntervals.intervals;
        vm.selectedInterval = DateIntervals.getSelected();
    }

    function _getAll() {
        vm.ads = [];
        vm.error = "";

        Ads.getAll(Accounts.active, vm.selectedInterval, campaignId, adSetId).then(function (response) {
            if (response.data.length > 0) {
                vm.ads = _processResponse(response.data);
            } else {
                vm.error = "No ads found.";
            }
        }, function (error) {
            vm.error = error.message;
        });
    }

    function _getCampaign() {
        Campaigns.active = campaignId;
        Campaigns.get(campaignId, vm.selectedInterval).then(function (campaign) {
            vm.campaign = campaign;
        });
    }

    function _getAdSet() {
        AdSets.active = adSetId;
        AdSets.get(adSetId, vm.selectedInterval).then(function (adSet) {
            vm.adSet = adSet;
        });
    }

    function _processResponse(input) {
        var output = input;
        var numTest = "";

        for (var i = 0; i < input.length; i++) {
            if (input[i].insights && input[i].insights.data && input[i].insights.data[0]) {
                Object.assign(output[i], input[i].insights.data[0]);
            }

            for (var j in input[i]) {
                // Parse all numbers as numbers except dates
                switch (j) {
                    case "created_time":
                    case "start_time":
                    case "stop_time":
                    case "date_start":
                    case "date_stop":
                    case "updated_time":
                        break;
                    default:
                        numTest = parseFloat(input[i][j]);
                        if (!isNaN(numTest)) input[i][j] = numTest;
                }
            }
        }

        return output;
    }

    function toggleColumn(col) {
        vm.columns[col] = !vm.columns[col];
        Ads.setDataColumns(vm.columns);
    }

    function toggleOrderBy(col) {
        if (vm.orderBy === col) {
            if (col[0] === "-") {
                vm.orderBy.replace("-", "");
            } else {
                vm.orderBy = "-" + col;
            }
        } else {
            vm.orderBy = col;
        }
    }

    function selectInterval(interval) {
        vm.selectedInterval = interval;
        DateIntervals.setSelected(interval);
    }
}]);
'use strict';

var modAdSets = angular.module('modAdSets');

modAdSets.controller('ctrlAdSets', ['$scope', '$routeParams', 'AdSets', 'Accounts', 'Dictionary', 'Currency', 'DateIntervals', 'Campaigns', function ($scope, $routeParams, AdSets, Accounts, Dictionary, Currency, DateIntervals, Campaigns) {
    var vm = this;
    var campaignId = $routeParams.campaignId;

    vm.adSets = [];
    vm.columns = {};
    vm.dictionary = {};
    vm.currency = {};
    vm.orderBy = "";
    vm.error = "";
    vm.dateIntervals = [];
    vm.selectedInterval = "";
    vm.campaign = {};

    vm.toggleColumn = toggleColumn;
    vm.toggleOrderBy = toggleOrderBy;
    vm.selectInterval = selectInterval;

    $scope.$watch(function () {
        return Accounts.active + vm.selectedInterval;
    }, function (newVal) {
        if (newVal) {
            _getAll();
            if (campaignId) {
                _getCampaign();
            }
        }
    });

    _init();

    function _init() {
        vm.dictionary = Dictionary;
        vm.currency = Currency;
        vm.columns = AdSets.getDataColumns();
        vm.dateIntervals = DateIntervals.intervals;
        vm.selectedInterval = DateIntervals.getSelected();

        if (campaignId) Campaigns.active = campaignId;
    }

    function _getAll() {
        vm.adSets = [];
        vm.error = "";

        AdSets.getAll(Accounts.active, vm.selectedInterval, campaignId).then(function (response) {
            if (response.data.length > 0) {
                vm.adSets = _processResponse(response.data);
            } else {
                vm.error = "No ad sets found.";
            }
        }, function (error) {
            vm.error = error.message;
        });
    }

    function _getCampaign() {
        Campaigns.active = campaignId;
        Campaigns.get(campaignId, vm.selectedInterval).then(function (campaign) {
            vm.campaign = campaign;
        });
    }

    function _processResponse(input) {
        var output = input;
        var numTest = "";

        for (var i = 0; i < input.length; i++) {
            if (input[i].insights && input[i].insights.data && input[i].insights.data[0]) {
                Object.assign(output[i], input[i].insights.data[0]);
            }

            for (var j in input[i]) {
                // Parse all numbers as numbers except dates
                switch (j) {
                    case "created_time":
                    case "start_time":
                    case "stop_time":
                    case "date_start":
                    case "date_stop":
                    case "updated_time":
                        break;
                    default:
                        numTest = parseFloat(input[i][j]);
                        if (!isNaN(numTest)) input[i][j] = numTest;
                }
            }
        }

        return output;
    }

    function toggleColumn(col) {
        vm.columns[col] = !vm.columns[col];
        AdSets.setDataColumns(vm.columns);
    }

    function toggleOrderBy(col) {
        if (vm.orderBy === col) {
            if (col[0] === "-") {
                vm.orderBy.replace("-", "");
            } else {
                vm.orderBy = "-" + col;
            }
        } else {
            vm.orderBy = col;
        }
    }

    function selectInterval(interval) {
        vm.selectedInterval = interval;
        DateIntervals.setSelected(interval);
    }
}]);
'use strict';

var modAudiences = angular.module('modAudiences');

modAudiences.controller('ctrlAudiences', ['$scope', 'Accounts', 'Dictionary', 'Audiences', function ($scope, Accounts, Dictionary, Audiences) {
    var vm = this;

    vm.audiences = [];
    vm.dictionary = {};
    vm.orderBy = "";
    vm.error = "";

    vm.toggleOrderBy = toggleOrderBy;

    $scope.$watch(function () {
        return Accounts.active;
    }, function (newVal) {
        if (newVal) {
            _getAll();
        }
    });

    _init();

    function _init() {
        vm.dictionary = Dictionary;
    }

    function _getAll() {
        vm.audiences = [];
        vm.error = "";
        Audiences.getAll(Accounts.active).then(function (response) {
            if (response.data.length > 0) {
                vm.audiences = _processResponse(response.data);
            }
        }, function (error) {
            vm.error = error.message;
        });
    }

    function _processResponse(input) {
        var output = input;

        return output;
    }

    function toggleOrderBy(col) {
        if (vm.orderBy === col) {
            if (col[0] === "-") {
                vm.orderBy.replace("-", "");
            } else {
                vm.orderBy = "-" + col;
            }
        } else {
            vm.orderBy = col;
        }
    }
}]);
'use strict';

var modAudiences = angular.module('modAudiences');

modAudiences.controller('ctrlAudiencesCreateEdit', ['Audiences', function (Audiences) {
    var vm = this;

    var saveLock = false;

    var testData = {
        "id": "123-abc-456-def-789",
        "name": "First audience",
        "targeting": {
            "age_max": 64,
            "age_min": 30,
            "app_install_state": "INSTALLED",
            "behaviors": [{
                "id": "6004386044572",
                "name": "Android Owners (All)"
            }],
            "college_years": [1980, 1981, 1982],
            "locales": [1, 2, 3, 4, 5],
            "connections": [],
            "custom_audiences": [{
                "id": "123",
                "name": "Test"
            }],
            "education_majors": [{
                "id": "123",
                "name": "Test"
            }],
            "education_schools": [{
                "id": "105930651606",
                "name": "Harvard University"
            }],
            "education_statuses": [1, 2, 3],
            "ethnic_affinity": [{
                "id": "123",
                "name": "Test"
            }],
            "excluded_connections": [],
            "excluded_custom_audiences": [{
                "id": "123",
                "name": "Test"
            }],
            "excluded_geo_locations": [],
            "family_statuses": [{
                "id": "123",
                "name": "Test"
            }],
            "friends_of_connections": [],
            "genders": [1, 2],
            "generation": [{
                "id": "123",
                "name": "Test"
            }],
            "geo_locations": {
                "countries": ["US"],
                "regions": [{
                    "key": "3847"
                }],
                "cities": [{
                    "key": "2430536",
                    "radius": 12,
                    "distance_unit": "mile"
                }],
                "zips": [{
                    "key": "US:94304"
                }, {
                    "key": "US:00501"
                }],
                "custom_locations": [{
                    "address_string": "1601 Willow Road, Menlo Park, CA",
                    "radius": 5
                }, {
                    "latitude": 36,
                    "longitude": -121,
                    "radius": 5,
                    "distance_unit": "kilometer"
                }],
                "geo_markets": [{
                    "key": "DMA:501",
                    "name": "New York"
                }, {
                    "key": "DMA:543",
                    "name": "Springfield-Holyoke"
                }],
                "location_types": ["recent", "home"]
            },
            "home_ownership": [{
                "id": "123",
                "name": "Test"
            }],
            "home_type": [{
                "id": "123",
                "name": "Test"
            }],
            "household_composition": [{
                "id": "123",
                "name": "Test"
            }],
            "income": [{
                "id": "123",
                "name": "Test"
            }],
            "industries": [{
                "id": "123",
                "name": "Test"
            }],
            "interested_in": [1, 2],
            "interests": [{
                "id": "6003139266461",
                "name": "Movies"
            }],
            "life_events": [{
                "id": "123",
                "name": "Test"
            }],
            "markets": [{
                "id": "123",
                "name": "Test"
            }],
            "moms": [{
                "id": "123",
                "name": "Test"
            }],
            "net_worth": [{
                "id": "123",
                "name": "Test"
            }],
            "office_type": [{
                "id": "123",
                "name": "Test"
            }],
            "page_types": ["desktopfeed", "rightcolumn", "mobilefeed", "instagramstream", "mobileexternal", "home"],
            "politics": [{
                "id": "123",
                "name": "Test"
            }],
            "relationship_statuses": [1, 2, 3],
            "user_device": [],
            "user_os": ["iOS", "Android"],
            "wireless_carrier": ["Wifi"],
            "work_employers": [{
                "id": "123",
                "name": "Test"
            }],
            "work_positions": [{
                "id": "123",
                "name": "Test"
            }],
            "flexible_spec": [],
            "exclusions": {}
        }
    };

    vm.title = "";

    vm.save = save;

    _init();

    function _init() {
        vm.title = "Create audience";
    }

    function save() {
        var payload = [];

        for (var i = 0; i < 12; i++) {
            payload.push(angular.copy(testData));
        }
        payload[0].name = "Test 1";payload[0].id = "0";
        payload[1].name = "Test 2";payload[1].id = "1";
        payload[2].name = "Test 3";payload[2].id = "2";
        payload[3].name = "Another";payload[3].id = "3";
        payload[4].name = "Cabbage";payload[4].id = "4";
        payload[5].name = "Justin is super cool!";payload[5].id = "5";
        payload[6].name = "I lied.";payload[6].id = "6";
        payload[7].name = "...this is really lame";payload[7].id = "7";
        payload[8].name = "Yay!";payload[8].id = "8";
        payload[9].name = "Mad?";payload[9].id = "9";
        payload[10].name = "MAD?!?!";payload[10].id = "10";
        payload[11].name = "MAD?!?!?!?!?!?!?";payload[11].id = "11";
        if (!saveLock) {
            saveLock = true;
            Audiences.remove().then(function (deleted) {
                Audiences.create(payload).then(function (updated) {
                    saveLock = false;
                });
            });
        }
    }
}]);
'use strict';

var modAudiences = angular.module('modAudiences');

modAudiences.directive('audience', ['Facebook', 'Accounts', 'Audiences', function (Facebook, Accounts, Audiences) {
    return {
        restrict: 'EA',
        scope: {},
        bindToController: {
            audience: '=',
            onSave: '='
        },
        controller: controller,
        link: link,
        controllerAs: "vm",
        replace: true,
        templateUrl: "/js/app/audiences/directives/audience/audience.html"
    };

    function controller($scope) {
        var vm = this;

        var saveLock = false;

        vm.ages = [];
        vm.audience = {};
        vm.locations = {};
        vm.locales = {};
        vm.categories = {};
        vm.demographics = {};
        vm.behaviors = {};
        vm.interests = {};
        vm.education_schools = {};
        vm.education_statuses = {};
        vm.college_years = {};
        vm.education_majors = {};
        vm.work_employers = {};
        vm.work_positions = {};
        vm.connections = {};

        vm.autocompleteLocation = autocompleteLocation;
        vm.autocompleteEducationSchool = autocompleteEducationSchool;
        vm.autocompleteEducationMajor = autocompleteEducationMajor;
        vm.autocompleteWorkEmployer = autocompleteWorkEmployer;
        vm.autocompleteWorkPosition = autocompleteWorkPosition;
        vm.hasData = hasData;
        vm.removeLocation = removeLocation;
        vm.removeDemographic = removeDemographic;
        vm.saveAudience = saveAudience;

        // Validate ages
        $scope.$watch(function () {
            return vm.audience.targeting.age_min + vm.audience.targeting.age_max;
        }, function () {
            if (vm.audience && vm.audience.targeting.age_min && vm.audience && vm.audience.targeting.age_max) {
                if (vm.audience.targeting.age_max < vm.audience.targeting.age_min) {
                    vm.audience.targeting.age_min = vm.audience.targeting.age_max;
                }
            }
        });

        // Location change
        $scope.$watch(function () {
            return vm.locations.selected;
        }, function (newVal) {
            if (newVal && JSON.stringify(newVal) !== "{}") {
                _addLocation();
            }
        });

        // Language/locale change
        $scope.$watch(function () {
            return vm.locales.selected;
        }, function (newVal) {
            if (newVal && JSON.stringify(newVal) !== "{}") {
                _addLocale();
            }
        });

        // Behaviors change
        $scope.$watch(function () {
            return vm.behaviors.selected;
        }, function (newVal) {
            if (newVal && JSON.stringify(newVal) !== "{}") {
                _addBehavior();
            }
        });

        // Interests change
        $scope.$watch(function () {
            return vm.interests.selected;
        }, function (newVal) {
            if (newVal && JSON.stringify(newVal) !== "{}") {
                _addInterest();
            }
        });

        // Demographics change
        $scope.$watch(function () {
            return vm.demographics.selected;
        }, function (newVal) {
            if (newVal && JSON.stringify(newVal) !== "{}") {
                _addDemographic();
            }
        });

        // Education schools change
        $scope.$watch(function () {
            return vm.education_schools.selected;
        }, function (newVal) {
            if (newVal && JSON.stringify(newVal) !== "{}") {
                _addDemographic('education_schools');
            }
        });

        // Education status change
        $scope.$watch(function () {
            return vm.education_statuses.selected;
        }, function (newVal) {
            if (newVal && JSON.stringify(newVal) !== "{}") {
                _addDemographic('education_statuses');
            }
        });

        // Education status change
        $scope.$watch(function () {
            return vm.college_years.selected;
        }, function (newVal) {
            if (newVal && JSON.stringify(newVal) !== "{}") {
                _addDemographic('college_years');
            }
        });

        // Education major change
        $scope.$watch(function () {
            return vm.education_majors.selected;
        }, function (newVal) {
            if (newVal && JSON.stringify(newVal) !== "{}") {
                _addDemographic('education_majors');
            }
        });

        // Work employer change
        $scope.$watch(function () {
            return vm.work_employers.selected;
        }, function (newVal) {
            if (newVal && JSON.stringify(newVal) !== "{}") {
                _addDemographic('work_employers');
            }
        });

        // Work employer change
        $scope.$watch(function () {
            return vm.work_positions.selected;
        }, function (newVal) {
            if (newVal && JSON.stringify(newVal) !== "{}") {
                _addDemographic('work_positions');
            }
        });

        // BCT change
        $scope.$watch(function () {
            return vm.categories.selected;
        }, function (newVal) {
            if (newVal && JSON.stringify(newVal) !== "{}") {
                _addBCT();
            }
        });

        // Connections change
        $scope.$watch(function () {
            return vm.connections.selected;
        }, function (newVal) {
            if (newVal && JSON.stringify(newVal) !== "{}") {
                _addConnection();
            }
        });

        _init();

        function _init() {
            _setDefaults();
            _setAges();
            _setConnectionOptions();
            _getLocales();
            _getDemographics();
            _getCategories();
            _getBehaviors();
            _getInterests();
            _getEducationStatuses();
            _getCollegeYears();
        }

        function _setAges() {
            for (var i = 13; i < 66; i++) {
                var item = { id: i, name: String(i) };
                if (i === 65) item.name = "65+";
                vm.ages.push(item);
            }
        }

        function _setDefaults() {
            vm.audience.targeting = {
                age_min: 13,
                age_max: 65,
                geo_locations: {
                    country: [{ key: 'US' }]
                },
                excluded_geo_locations: {},
                genders: "",
                locales: [6],
                behaviors: [],
                interests: [],
                user_adclusters: []

            };
            vm.locations = {
                type: "geo_locations",
                all: [],
                selected: {}
            };
            vm.locales = {
                all: [],
                selected: {}
            };
            vm.categories = {
                all: [],
                selected: {}
            };
            vm.demographics = {
                all: [],
                selected: {}
            };
            vm.behaviors = {
                all: [],
                selected: {}
            };
            vm.interests = {
                all: [],
                selected: {}
            };
            vm.education_schools = {
                all: [],
                selected: {}
            };
            vm.education_statuses = {
                all: [],
                selected: {}
            };
            vm.college_years = {
                all: [],
                selected: {}
            };
            vm.education_majors = {
                all: [],
                selected: {}
            };
            vm.work_employers = {
                all: [],
                selected: {}
            };
            vm.work_positions = {
                all: [],
                selected: {}
            };
        }

        function _setConnectionOptions() {
            vm.connections.all = [{ id: "include", name: "Connections", desc: "People who are a fan of your Page, a member of your group, RSVP’d to your event or have authorized your app. " }, { id: "exclude", name: "Excluded connections", desc: "People who have not become fans of your page, members of your group, RSVP'd to your event or authorized your app." }, { id: "friends", name: "Friends of connections", desc: "Friends of the people who are connected to your object." }];
        }

        function _addConnection() {
            vm.audience.targeting.connections = false;
            vm.audience.targeting.excluded_connections = false;
            vm.audience.targeting.friends_of_connections = false;

            if (vm.connections.selected.id === "include") vm.audience.targeting.connections = true;
            if (vm.connections.selected.id === "exclude") vm.audience.targeting.excluded_connections = true;
            if (vm.connections.selected.id === "friends") vm.audience.targeting.friends_of_connections = true;
        }

        function _addLocation() {
            var type = vm.locations.selected.type;
            var item = {};

            switch (vm.locations.selected.type) {
                case "countries":
                    item = vm.locations.selected.key;
                    break;
                case "cities":
                    item = { key: vm.locations.selected.key, radius: 12, distance_unit: "mile" };
                    break;
                case "custom_locations":
                    item = {};
                    break;
                case "geo_markets":
                    item = { key: vm.locations.selected.key, name: vm.locations.selected.name };
                    break;
                default:
                    item = { key: vm.locations.selected.key };
            }

            if (!vm.audience.targeting[vm.locations.type][type]) vm.audience.targeting[vm.locations.type][type] = [];
            vm.audience.targeting[vm.locations.type][type].push(item);
        }

        function _addLocale() {
            if (vm.audience.targeting.locales.indexOf(vm.locales.selected) === -1) {
                vm.audience.targeting.locales.push(vm.locales.selected);
            }
        }

        function _addDemographic(type) {
            if (!type) {
                type = vm.demographics.selected.type;
                if (!vm.audience.targeting[type]) vm.audience.targeting[type] = [];

                if (!vm.audience.targeting[type].find(function (item) {
                    return item.id === vm.demographics.selected.id;
                })) {
                    vm.audience.targeting[type].push({
                        id: vm.demographics.selected.id,
                        name: vm.demographics.selected.name
                    });
                }
            } else {
                if (!vm.audience.targeting[type]) vm.audience.targeting[type] = [];

                if (!vm.audience.targeting[type].find(function (item) {
                    return item.id === vm[type].selected.id;
                })) {
                    vm.audience.targeting[type].push({
                        id: vm[type].selected.id,
                        name: vm[type].selected.name
                    });
                }
            }
        }

        function _addBehavior() {
            if (!vm.audience.targeting.behaviors.find(function (item) {
                return item.id === vm.behaviors.selected.id;
            })) {
                vm.audience.targeting.behaviors.push({
                    id: vm.behaviors.selected.id,
                    name: vm.behaviors.selected.name
                });
            }
        }

        function _addInterest() {
            if (!vm.audience.targeting.interests.find(function (item) {
                return item.id === vm.interests.selected.id;
            })) {
                vm.audience.targeting.interests.push({
                    id: vm.interests.selected.id,
                    name: vm.interests.selected.name
                });
            }
        }

        function _addBCT() {
            if (!vm.audience.targeting.user_adclusters.find(function (item) {
                return item.id === vm.categories.selected.id;
            })) {
                vm.audience.targeting.user_adclusters.push({
                    id: vm.categories.selected.id,
                    name: vm.categories.selected.name
                });
            }
        }

        function _getCategories() {
            Facebook.get('/' + Accounts.active + '/broadtargetingcategories').then(function (results) {
                vm.categories.all = results.data;
            });
        }

        function _getLocales() {
            Facebook.get('/search', {
                q: "",
                limit: "500",
                locale: "en_US",
                type: "adlocale"
            }).then(function (results) {
                for (var i = 0; i < results.data.length; i++) {
                    results.data[i].id = results.data[i].key;
                }
                vm.locales.all = results.data;
            });
        }

        function _getDemographics() {
            Facebook.get('/search', {
                class: "demographics",
                limit: "500",
                locale: "en_US",
                type: "adTargetingCategory"
            }).then(function (results) {
                vm.demographics.all = _generateTree(results.data);
            });
        }

        function _getBehaviors() {
            Facebook.get('/search', {
                class: "behaviors",
                locale: "en_US",
                type: "adTargetingCategory"
            }).then(function (results) {
                vm.behaviors.all = _generateTree(results.data);
            });
        }

        function _getInterests() {
            Facebook.get('/search', {
                locale: "en_US",
                type: "adInterestCategory"
            }).then(function (results) {
                vm.interests.all = _generateTree(results.data);
            });
        }

        function _getCollegeYears() {
            for (var i = 1980; i < 2019; i++) {
                vm.college_years.all.push({ name: i, id: i });
            }
        }

        function _getEducationStatuses() {
            vm.education_statuses.all = [{ id: 1, name: "High school" }, { id: 2, name: "Undergrad" }, { id: 3, name: "Alum" }, { id: 4, name: "High school grad" }, { id: 5, name: "Some college" }, { id: 6, name: "Associate degree" }, { id: 7, name: "In grad school" }, { id: 8, name: "Some grad school" }, { id: 9, name: "Master degree" }, { id: 10, name: "Professional degree" }, { id: 11, name: "Doctorate degree" }, { id: 12, name: "Unspecified" }, { id: 13, name: "Some high school" }];
        }

        function _generateTree(data) {
            // TODO: generate data trees
            return data;
        }

        function autocompleteLocation(searchString) {
            Facebook.get('/search', {
                q: searchString,
                type: 'adgeolocation',
                limit: 10
            }).then(function (results) {
                for (var i = 0; i < results.data.length; i++) {
                    results.data[i].id = results.data[i].key;
                }
                vm.locations.all = results.data;
            });
        }

        function autocompleteEducationSchool(searchString) {
            Facebook.get('/search', {
                q: searchString,
                type: 'adeducationschool',
                limit: 10
            }).then(function (results) {
                vm.education_schools.all = results.data;
            });
        }

        function autocompleteEducationMajor(searchString) {
            Facebook.get('/search', {
                q: searchString,
                type: 'adeducationmajor',
                limit: 10
            }).then(function (results) {
                vm.education_majors.all = results.data;
            });
        }

        function autocompleteWorkEmployer(searchString) {
            Facebook.get('/search', {
                q: searchString,
                type: 'adworkemployer',
                limit: 10
            }).then(function (results) {
                vm.work_employers.all = results.data;
            });
        }

        function autocompleteWorkPosition(searchString) {
            Facebook.get('/search', {
                q: searchString,
                type: 'adworkposition',
                limit: 10
            }).then(function (results) {
                vm.work_positions.all = results.data;
            });
        }

        function hasData(item) {
            if (Object.keys(item).length === 1 && Object.keys(item)[0] === "location_types") {
                return false;
            }

            return Object.keys(item).length > 0;
        }

        function removeLocation(l, inclusionType, type) {
            var index = vm.audience.targeting[inclusionType][type].indexOf(l);

            if (index > -1) {
                vm.audience.targeting[inclusionType][type].splice(index, 1);
            }

            if (vm.audience.targeting[inclusionType][type].length === 0) {
                delete vm.audience.targeting[inclusionType][type];
            }
        }

        function removeDemographic(index, demographic) {
            vm.audience.targeting[demographic].splice(index, 1);
        }

        function saveAudience() {
            if (!saveLock) {
                saveLock = true;
                vm.audience.id = 123;
                Audiences.remove().then(function (deleted) {
                    Audiences.create([vm.audience]).then(function (response) {
                        saveLock = false;

                        if (vm.onSave) {
                            vm.onSave("Testing!");
                        }
                    });
                });
            }
        }
    }

    function link(scope, elem, attrs) {}
}]);
'use strict';

var modCampaigns = angular.module('modCampaigns');

modCampaigns.controller('ctrlCampaigns', ['$scope', 'Campaigns', 'Accounts', 'Dictionary', 'Currency', 'DateIntervals', function ($scope, Campaigns, Accounts, Dictionary, Currency, DateIntervals) {
    var vm = this;

    vm.campaigns = [];
    vm.columns = {};
    vm.dictionary = {};
    vm.currency = {};
    vm.orderBy = "";
    vm.error = "";
    vm.dateIntervals = [];
    vm.selectedInterval = "";

    vm.toggleColumn = toggleColumn;
    vm.toggleOrderBy = toggleOrderBy;
    vm.selectInterval = selectInterval;

    $scope.$watch(function () {
        return Accounts.active + vm.selectedInterval;
    }, function (newVal) {
        if (newVal) {
            _getAll();
        }
    });

    _init();

    function _init() {
        vm.dictionary = Dictionary;
        vm.currency = Currency;
        vm.columns = Campaigns.getDataColumns();
        vm.dateIntervals = DateIntervals.intervals;
        vm.selectedInterval = DateIntervals.getSelected();
    }

    function _getAll() {
        vm.campaigns = [];
        vm.error = "";

        Campaigns.getAll(Accounts.active, vm.selectedInterval).then(function (response) {
            if (response.data.length > 0) {
                vm.campaigns = _processResponse(response.data);
            } else {
                vm.error = "No campaigns found.";
            }
        }, function (error) {
            vm.error = error.message;
        });
    }

    function _processResponse(input) {
        var output = input;
        var numTest = "";

        for (var i = 0; i < input.length; i++) {
            if (input[i].insights && input[i].insights.data && input[i].insights.data[0]) {
                Object.assign(output[i], input[i].insights.data[0]);
            }

            for (var j in input[i]) {
                // Parse all numbers as numbers except dates
                switch (j) {
                    case "created_time":
                    case "start_time":
                    case "stop_time":
                    case "date_start":
                    case "date_stop":
                    case "updated_time":
                        break;
                    default:
                        numTest = parseFloat(input[i][j]);
                        if (!isNaN(numTest)) input[i][j] = numTest;
                }
            }
        }

        return output;
    }

    function toggleColumn(col) {
        vm.columns[col] = !vm.columns[col];
        Campaigns.setDataColumns(vm.columns);
    }

    function toggleOrderBy(col) {
        if (vm.orderBy === col) {
            if (col[0] === "-") {
                vm.orderBy.replace("-", "");
            } else {
                vm.orderBy = "-" + col;
            }
        } else {
            vm.orderBy = col;
        }
    }

    function selectInterval(interval) {
        vm.selectedInterval = interval;
        DateIntervals.setSelected(interval);
    }
}]);
'use strict';

var modAutomation = angular.module('modAutomation', ['modCommon']);

modAutomation.controller('ctrlAutomation', [function () {}]);
'use strict';

var modCampaigns = angular.module('modCampaigns');

modCampaigns.controller('ctrlCampaignsCreate', ['$scope', 'Accounts', 'Campaigns', 'Dictionary', 'Objectives', 'Facebook', 'Audiences', function ($scope, Accounts, Campaigns, Dictionary, Objectives, Facebook, Audiences) {
    var vm = this;

    vm.objectives = [];
    vm.dictionary = {};
    vm.campaign = {};
    vm.pages = [];
    vm.posts = [];
    vm.pixels = [];
    vm.audiences = [];
    vm.selectedAudience = {};
    vm.ui = {};

    vm.showDetails = showDetails;
    vm.saveAudience = saveAudience;

    _init();

    // Watch objective change
    $scope.$watch(function () {
        return vm.campaign.objective;
    }, function (newVal) {
        if (newVal) {
            //console.log(newVal);
        }
    });

    // Watch account change
    $scope.$watch(function () {
        return Accounts.active;
    }, function (newVal) {
        if (newVal) {
            _init();
        }
    });

    // Watch page change
    $scope.$watch(function () {
        return vm.campaign.promoted_object.page_id;
    }, function (newVal) {
        if (newVal && vm.campaign.objective === "POST_ENGAGEMENT") {
            _getPagePosts();
        }
    });

    // Watch selected audience
    $scope.$watch(function () {
        return vm.selectedAudience;
    }, function (newVal) {
        if (newVal && JSON.stringify(newVal) !== "{}") {
            _addAudience(vm.selectedAudience);
        }
    });

    function _init() {
        vm.objectives = Objectives.all;
        vm.dictionary = Dictionary;
        vm.campaign = _setDefaultCampaign();
        vm.pages = _getAccountPages();
        vm.pixels = _getAccountPixels();

        _getAudiences();
    }

    function _getAudiences() {
        Audiences.getAll(Accounts.active).then(function (response) {
            if (response.data.length > 0) {
                vm.audiences = response.data;
            } else {
                vm.ui.createAudience = true;
            }
        }, function (error) {
            vm.error = error.message;
        });
    }

    function _addAudience(id) {
        var add = vm.audiences.find(function (audience) {
            return audience.id === id;
        });
        vm.campaign.audiences.push(add);
        vm.selectedAudience = {};
    }

    function _setDefaultCampaign() {
        return {
            name: "",
            audiences: [],
            objective: "",
            buying_type: "AUCTION",
            budget: {},
            promoted_object: {
                page_id: undefined,
                application_id: undefined,
                pixel_id: undefined,
                custom_event_type: undefined,
                object_store_url: undefined,
                offer_id: undefined,
                product_catalog_id: undefined,
                product_set_id: undefined
            },
            spend_cap: undefined,
            execution_options: undefined,
            adlabels: undefined
        };
    }

    function _getAccountPages() {
        Facebook.get('/' + Accounts.active + '/connectionobjects').then(function (connectionobjects) {
            var ary = connectionobjects.data;
            vm.pages = ary.filter(function (obj) {
                return obj.type === 1;
            });
            vm.applications = ary.filter(function (obj) {
                return obj.type === 2;
            });
            vm.events = ary.filter(function (obj) {
                return obj.type === 3;
            });
            vm.places = ary.filter(function (obj) {
                return obj.type === 6;
            });
            vm.domains = ary.filter(function (obj) {
                return obj.type === 7;
            });
        });
    }

    function _getAccountPixels() {
        Facebook.get('/' + Accounts.active + '/offsitepixels').then(function (offsitepixels) {
            vm.pixels = offsitepixels.data;
        });
    }

    function _getPagePosts() {
        Facebook.get('/' + vm.campaign.promoted_object.page_id + '/promotable_posts', { fields: ["full_picture", "icon", "is_published", "link", "message", "name", "object_id", "picture", "story", "type"] }).then(function (posts) {
            vm.posts = posts.data;
        });
    }

    function showDetails() {
        return !!vm.campaign.objective;
    }

    function saveAudience(audienceId) {
        vm.ui.createAudience = false;
        _getAudiences();
    }
}]);
'use strict';

var modCommon = angular.module('modCommon');

modCommon.controller('ctrlMain', ['$scope', '$interval', '$location', '$window', 'User', 'Facebook', 'Accounts', 'Navigation', 'Loading', 'Version', 'Campaigns', 'AdSets', function ($scope, $interval, $location, $window, User, Facebook, Accounts, Navigation, Loading, Version, Campaigns, AdSets) {
    var vm = this;

    vm.user = {};
    vm.accounts = {};
    vm.navigation = {};
    vm.loading = {};
    vm.version = "";
    vm.year = "";
    vm.activeCampaign = "";

    vm.logout = logout;
    vm.login = login;

    $scope.$watch(function () {
        return Campaigns.active;
    }, function (newVal) {
        return vm.activeCampaign = newVal;
    });
    $scope.$watch(function () {
        return AdSets.active;
    }, function (newVal) {
        return vm.activeAdSet = newVal;
    });

    $scope.$on('$locationChangeStart', function (event) {
        Navigation.active = $location.path().split("/");
        Campaigns.active = "";
        AdSets.active = "";
    });

    _init();

    function _init() {
        vm.user = User;
        vm.accounts = Accounts;
        vm.navigation = Navigation;
        vm.loading = Loading;

        vm.year = new Date().getFullYear();
        Version.get().then(function (v) {
            return vm.version = v.version;
        });

        var versionCheck = $interval(function () {
            Version.get().then(function (v) {
                if (vm.version !== v.version) {
                    if ($window.confirm("A newer version of the Jiph application is available. Please click \"OK\" to refresh the application.")) {
                        $window.location.href = "/";
                    }
                }
            });
        }, 300000);
    }

    function logout() {
        Facebook.logout().then(function () {
            User.clearUserInfo();
        });
    }

    function login() {
        Facebook.login().then(function (loginInfo) {
            var accountId = $window.localStorage.getItem("activeAccountId");

            if (accountId) {
                Accounts.active = accountId;
            }

            Facebook.get('/me', { fields: 'id,name,first_name,last_name,picture' }).then(function (userInfo) {
                User.setUserInfo(loginInfo.authResponse, userInfo);
            });

            Accounts.getAll(loginInfo.authResponse.userID).then(function () {
                if (!Accounts.all.find(function (account) {
                    return account.id === Accounts.active;
                })) {
                    Accounts.setActive("");
                }
            });
        });
    }
}]);
'use strict';

var modCommon = angular.module('modCommon');

modCommon.directive('comboBox', [function () {
    return {
        restrict: 'EA',
        scope: {},
        bindToController: {
            comboBox: '=',
            bind: '=',
            autocomplete: '=',
            type: '@',
            placeholder: '@',
            clearOnSelect: '='
        },
        controller: controller,
        link: link,
        controllerAs: "vm",
        replace: true,
        template: '\n            <div>\n                <div class="click-catcher" ng-click="vm.toggleMenu()" ng-if="vm.showMenu"></div>\n                <div class="combo-box" ng-switch="vm.type">\n                    <div class="wrapper" ng-class="{\'loading\': !vm.comboBox}">\n                        <input type="text" ng-model="vm.filter" ng-click="vm.toggleMenu()" placeholder="{{vm.placeholder}}" />\n                    </div>\n                    <div class="drop-menu" ng-if="vm.showMenu" ng-switch-when="connectionobjects">\n                        <ul>\n                            <li ng-repeat="c in vm.comboBox | filter:vm.filter" ng-click="vm.select(c)">\n                            <img ng-src="{{c.picture}}" ng-alt="{{c.name}}" />\n                                <div class="pad-content">\n                                    {{c.name}}<br />\n                                    <small ng-if="c.website">{{c.website}}</small>\n                                    <small ng-if="!c.website">{{c.url}}</small>\n                                </div>\n                            </li>\n                            <li ng-if="vm.comboBox.length === 0">No data found.</li>\n                        </ul>\n                    </div>\n                    <div class="drop-menu" ng-if="vm.showMenu" ng-switch-when="pixels">\n                        <ul>\n                            <li ng-repeat="c in vm.comboBox | filter:vm.filter" ng-click="vm.select(c)">\n                                {{c.name}}<br />\n                                <small>ID: {{c.id}} &nbsp;&nbsp;&nbsp; Category: {{c.tag}}</small>\n                            </li>\n                            <li ng-if="vm.comboBox.length === 0">No data found.</li>\n                        </ul>\n                    </div>\n                    <div class="drop-menu" ng-if="vm.showMenu" ng-switch-when="locations">\n                        <ul>\n                            <li ng-repeat="c in vm.comboBox" ng-click="vm.selectObject(c)">\n                                {{c.name}} <small>{{c.type}}</small>\n                            </li>\n                            <li ng-if="vm.comboBox.length === 0">No data found.</li>\n                        </ul>\n                    </div>\n                    <div class="drop-menu" ng-if="vm.showMenu" ng-switch-when="object">\n                        <ul>\n                            <li ng-repeat="c in vm.comboBox" ng-click="vm.selectObject(c)">\n                                {{c.name}}\n                            </li>\n                            <li ng-if="vm.comboBox.length === 0">No data found.</li>\n                        </ul>\n                    </div>\n                    <div class="drop-menu" ng-if="vm.showMenu" ng-switch-when="targeting">\n                        <ul>\n                            <li ng-repeat="c in vm.comboBox | filter:vm.filter" ng-click="vm.selectObject(c)">\n                                {{c.name}}<br /><small>Audience size: {{c.audience_size || c.size | number}}</small>\n                            </li>\n                            <li ng-if="vm.comboBox.length === 0">No data found.</li>\n                        </ul>\n                    </div>\n                    <div class="drop-menu" ng-if="vm.showMenu" ng-switch-when="connections">\n                        <ul>\n                            <li ng-repeat="c in vm.comboBox | filter:vm.filter" ng-click="vm.selectObject(c)">\n                                {{c.name}}<br /><small>{{c.desc}}</small>\n                            </li>\n                            <li ng-if="vm.comboBox.length === 0">No data found.</li>\n                        </ul>\n                    </div>\n                    <div class="drop-menu" ng-if="vm.showMenu" ng-switch-when="education">\n                        <ul>\n                            <li ng-repeat="c in vm.comboBox | filter:vm.filter" ng-click="vm.selectObject(c)">\n                                {{c.name}} <small>{{c.subtext}}</small><br /><small>Audience size: {{c.coverage | number}}</small>\n                            </li>\n                            <li ng-if="vm.comboBox.length === 0">No data found.</li>\n                        </ul>\n                    </div>\n                    <div class="drop-menu" ng-if="vm.showMenu" ng-switch-when="employers">\n                        <ul>\n                            <li ng-repeat="c in vm.comboBox | filter:vm.filter" ng-click="vm.selectObject(c)">\n                                {{c.name}}<br /><small>Audience size: {{c.coverage | number}}</small>\n                            </li>\n                            <li ng-if="vm.comboBox.length === 0">No data found.</li>\n                        </ul>\n                    </div>\n                    <div class="drop-menu" ng-if="vm.showMenu" ng-switch-default>\n                        <ul>\n                            <li ng-repeat="c in vm.comboBox | filter:vm.filter" ng-click="vm.select(c)">{{c.name}}</li>\n                            <li ng-if="vm.comboBox.length === 0">No data found.</li>\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        '
    };

    function controller($scope) {
        var vm = this;

        vm.showMenu = false;

        vm.select = select;
        vm.selectObject = selectObject;
        vm.toggleMenu = toggleMenu;

        $scope.$watch(function () {
            return vm.filter;
        }, function (newVal, oldVal) {
            if (vm.autocomplete && vm.filter && vm.filter !== "" && newVal !== oldVal && newVal.length > 0) {
                vm.autocomplete(vm.filter);
            }
        });

        function select(c) {
            vm.bind = c.id;
            if (vm.clearOnSelect) {
                vm.bindName = "";
            } else {
                vm.bindName = c.name;
            }
            vm.filter = vm.bindName;
            toggleMenu();
        }

        function selectObject(c) {
            vm.bind = c;
            if (vm.clearOnSelect) {
                vm.bindName = "";
            } else {
                vm.bindName = c.name;
            }
            vm.filter = vm.bindName;
            toggleMenu();
        }

        function toggleMenu() {
            vm.showMenu = !vm.showMenu;
            if (vm.showMenu) {
                vm.filter = "";
            } else {
                vm.filter = vm.bindName;
            }
        }
    }

    function link(scope, elem, attrs) {}
}]);
'use strict';

var modCommon = angular.module('modCommon');

modCommon.directive('debug', [function () {
    return {
        restrict: 'EA',
        scope: {},
        bindToController: {
            debug: '=',
            title: '@debug'
        },
        controller: function controller() {},
        controllerAs: "vm",
        replace: true,
        template: '\n            <div class="debug">\n                <div class="btn btn-default pull-left" ng-click="vm.isDebugging = !vm.isDebugging">Debug {{vm.title}}</div>\n                <pre ng-show="vm.isDebugging">{{vm.debug | json}}</pre>\n            </div>\n        '
    };
}]);
'use strict';

var modCommon = angular.module('modCommon');

modCommon.directive('loading', [function () {
    return {
        restrict: 'A',
        templateUrl: '/js/app/common/directives/loading/loading.html',
        replace: true,
        scope: {
            loading: '='
        }
    };
}]);
'use strict';

angular.module('modCommon').filter('orderObjectBy', function () {
    return function (items, field, reverse) {
        var filtered = [];
        angular.forEach(items, function (item) {
            filtered.push(item);
        });
        filtered.sort(function (a, b) {
            return a[field] > b[field] ? 1 : -1;
        });
        if (reverse) filtered.reverse();
        return filtered;
    };
});
'use strict';

var modCommon = angular.module('modCommon');

modCommon.directive('dropMenu', ['$timeout', function ($timeout) {
    return {
        restrict: 'A',
        link: function link(scope, el, attr) {
            var _timerId = null;
            var isOpen = false;

            var onClick = function onClick() {
                clearTimer();
                if (isOpen) {
                    isOpen = false;
                    el.removeClass("open");
                } else {
                    isOpen = true;
                    el.addClass("open");
                }
            };

            var onMouseEnter = function onMouseEnter() {
                if (isOpen) {
                    clearTimer();
                    cancelAllHover();
                    el.addClass("open");
                }
            };

            var onMouseLeave = function onMouseLeave() {
                startTimer();
            };

            var startTimer = function startTimer() {
                clearTimer();
                _timerId = $timeout(function () {
                    isOpen = false;
                    el.removeClass("open");
                }, 500);
            };

            var clearTimer = function clearTimer() {
                if (_timerId !== null) {
                    $timeout.cancel(_timerId);
                    _timerId = null;
                }
            };

            var cancelAllHover = function cancelAllHover() {
                $('[drop-menu]').removeClass("open");
            };

            el.bind('click', onClick);
            el.bind('mouseleave', onMouseLeave);
            el.bind('mouseenter', onMouseEnter);
        }
    };
}]);
'use strict';

var modDashboard = angular.module('modDashboard');

modDashboard.controller('ctrlDashboard', ['$q', '$timeout', 'Dashboard', 'EstimateTimeToCompletion', 'Accounts', 'Loading', function ($q, $timeout, Dashboard, EstimateTimeToCompletion, Accounts, Loading) {
    var vm = this;

    var defaultReport = {
        data: [],
        summary: {}
    };

    vm.accounts = [];
    vm.startDate = moment().subtract(7, 'days').startOf('day').format('YYYY-MM-DD');
    vm.endDate = moment().endOf('day').format('YYYY-MM-DD');

    vm.getCurrency = getCurrency;
    vm.getNumber = getNumber;
    vm.selectAccount = selectAccount;

    _init();

    function _init() {
        Accounts.getAll().then(function (accounts) {
            if (accounts && accounts.length > 0) {
                vm.accounts = accounts;
                _getAccountInsights();
            }
        });
    }

    function _getAccountInsights() {
        var startTime = Date.now() / 1000 | 0;

        var _loop = function _loop(i) {
            Dashboard.generateReport(vm.accounts[i].id, vm.startDate, vm.endDate).then(function (report) {
                if (report.report_run_id) {
                    _checkReportStatus(report.report_run_id, vm.accounts[i].id);
                }
            }, function (error) {
                Object.assign(vm.accounts[i], _processInsights(defaultReport));
                vm.accounts[i].error = error.message;
            });
        };

        for (var i = 0; i < vm.accounts.length; i++) {
            _loop(i);
        }

        function _checkReportStatus(asyncReportId, accountId, delay) {
            Loading.set(true, 'asyncstatus');
            var currentTime = Date.now() / 1000 | 0;
            if (!delay) delay = 2000;
            $timeout(function () {
                Dashboard.checkReportStatus(asyncReportId).then(function (status) {
                    if (status.async_status === "Job Completed") {
                        Loading.set(false, 'asyncstatus');
                        _fetchAsyncReport(asyncReportId, accountId);
                    } else {
                        delay = EstimateTimeToCompletion.get(startTime, currentTime, status.async_percent_completion);
                        Loading.set(false, 'asyncstatus');
                        _checkReportStatus(asyncReportId, accountId, delay);
                    }
                }, function (error) {
                    Loading.set(false, 'asyncstatus');
                });
            }, delay);
        }

        function _fetchAsyncReport(asyncReportId, accountId) {
            Dashboard.fetchAsyncReport(asyncReportId).then(function (report) {
                if (report && report.summary && report.summary.account_id) {
                    Object.assign(vm.accounts.find(function (account) {
                        return account.id === accountId;
                    }), _processInsights(report));
                } else {
                    Object.assign(vm.accounts.find(function (account) {
                        return account.id === accountId;
                    }), _processInsights(defaultReport));
                }
            });
        }
    }

    function _processInsights(input) {
        var currentDate = "";
        var foundDate = {};
        var days = moment(vm.endDate).diff(moment(vm.startDate), 'days');
        var output = input;
        var aryDates = [];

        for (var i = 0; i < days; i++) {
            currentDate = moment(vm.startDate).add(i, 'days').format('YYYY-MM-DD');

            foundDate = input.data.find(function (date) {
                return date.date_start === currentDate;
            });

            if (foundDate) {
                aryDates.push([currentDate, foundDate.spend]);
            } else {
                aryDates.push([currentDate, 0]);
            }
        }

        output.data = aryDates;

        if (!output.summary) {
            output.summary = {
                impressions: 0,
                reach: 0,
                spend: 0
            };
        }

        return output;
    }

    function getCurrency(insights, col) {
        var output = 0;

        if (insights && insights.summary && insights.summary[col] && insights.summary[col] !== 0) output = insights.summary[col];

        return output;
    }

    function getNumber(insights, col) {
        var output = 0;

        if (insights && insights.summary && insights.summary[col]) output = insights.summary[col];

        return output;
    }

    function selectAccount(account) {
        Accounts.setActive(account.id);
    }
}]);
'use strict';

angular.module('modCommon').factory('Accounts', ['$window', 'Facebook', function ($window, Facebook) {
    var service = {};

    service.all = [];
    service.active = "";

    service.getAll = getAll;
    service.setActive = setActive;
    service.getActive = getActive;
    service.getAccountName = getAccountName;
    service.getCurrencyOffset = getCurrencyOffset;

    return service;

    function getAll() {
        return Facebook.get('/me/adaccounts', { fields: 'name,id,owner_business,currency,amount_spent,spend_cap' }).then(function (results) {
            service.all = results.data;
            return results.data;
        });
    }

    function setActive(accountId) {
        if (accountId) {
            service.active = accountId;
            $window.localStorage.setItem("activeAccountId", accountId);
        } else {
            service.active = "";
            $window.localStorage.removeItem("activeAccountId");
        }
    }

    function getActive() {
        if (service.all.length > 0 && service.active) {
            return service.all.find(function (account) {
                return account.id === service.active;
            });
        } else {
            return {};
        }
    }

    function getAccountName(accountId) {
        if (accountId) {
            if (service.all && service.all.length > 0) {
                return service.all.find(function (account) {
                    return account.id === accountId;
                }).name;
            } else {
                return "No accounts available";
            }
        } else {
            return "No account selected";
        }
    }

    function getCurrencyOffset() {
        var c = service.getActive().currency;

        if (c === "CLP" || c === "COP" || c === "CRC" || c === "HUF" || c === "ISK" || c === "IDR" || c === "JPY" || c === "KRW" || c === "PYG" || c === "TWD" || c === "VND") {
            return 1;
        } else {
            return 100;
        }
    }
}]);
'use strict';

angular.module('modCommon').factory('Api', [function () {
    var service = {};

    service.path = "/api/v1/prototype";

    return service;
}]);
'use strict';

angular.module('modCommon').factory('Currency', ['Accounts', function (Accounts) {
    var service = {};

    service.to = to;
    service.from = from;

    return service;

    function to(val) {
        return isNaN(val / Accounts.getCurrencyOffset()) ? null : val / Accounts.getCurrencyOffset();
    }

    function from(val) {
        return isNaN(val * Accounts.getCurrencyOffset()) ? null : val * Accounts.getCurrencyOffset();
    }
}]);
'use strict';

angular.module('modCommon').factory('DateIntervals', ['$window', 'Facebook', function ($window, Facebook) {
    var service = {};

    service.intervals = ['today', 'yesterday', 'last_3_days', 'this_week', 'last_week', 'last_7_days', 'last_14_days', 'last_28_days', 'last_30_days', 'last_90_days', 'this_month', 'last_month', 'this_quarter', 'last_3_months', 'lifetime'];

    service.getSelected = getSelected;
    service.setSelected = setSelected;

    return service;

    function getSelected() {
        var interval = $window.localStorage.getItem("dateInterval");

        if (!interval) interval = "last_7_days";

        return interval;
    }

    function setSelected(interval) {
        $window.localStorage.setItem("dateInterval", interval);
    }
}]);
'use strict';

angular.module('modCommon').factory('EstimateTimeToCompletion', [function () {
    var service = {};

    service.get = get;

    return service;

    function get(startTime, currentTime, percentageComplete) {
        var elapsedTime = currentTime - startTime;
        var estimated = elapsedTime / percentageComplete * 100;

        if (isNaN(estimated) || estimated === 0 || estimated === Infinity) estimated = 2;

        return (estimated - elapsedTime) * 1000 / 2 < 2000 ? 2000 : (estimated - elapsedTime) * 1000 / 2;
    }
}]);
'use strict';

angular.module('modCommon').factory('Dictionary', [function () {
    var service = {};

    service.terms = {
        ad_review_feedback: "Ad review feedback",
        adlabels: "Ad labels",
        ads: "Ads",
        adset: "Ad set",
        adsets: "Ad sets",
        adset_id: "Ad set ID",
        adset_schedule: "Ad set schedule",
        account_id: "Account ID",
        bid_amount: "Bid amount",
        bid_info: "Bid info",
        bid_type: "Bid type",
        billing_event: "Billing event",
        budget_remaining: "Budget remaining",
        buying_type: "Buying type",
        campaign: "Campaign",
        campaigns: "Campaigns",
        campaign_id: "Campaign ID",
        can_use_spend_cap: "Can use spend cap",
        configured_status: "Configured status",
        conversion_specs: "Conversion specs",
        create_ad: "Create Ad",
        create_ad_set: "Create Ad Set",
        create_campaign: "Create Campaign",
        create_ad_group: "Create Ad Group",
        create_audience: "Create Audience",
        created_time: "Created time",
        creative: "Creative",
        creative_sequence: "Creative sequence",
        customize_columns: "Customize Columns",
        daily_budget: "Daily budget",
        effective_status: "Effective status",
        end_time: "End time",
        frequency_cap: "Frequency cap",
        frequency_cap_reset_period: "Frequency cap reset period",
        id: "ID",
        is_autobid: "Is auto bid",
        last_updated_by_app_id: "Last updated by app ID",
        lifetime_budget: "Lifetime budget",
        lifetime_frequency_cap: "Lifetime frequency cap",
        lifetime_imps: "Lifetime impressions",
        name: "Name",
        objective: "Objective",
        optimization_goal: "Optimization goal",
        pacing_type: "Pacing type",
        product_ad_behavior: "Product ad behavior",
        promoted_object: "Promoted object",
        rf_prediction_id: "RF prediction ID",
        rtb_flag: "RTB flag",
        spend_cap: "Spend cap",
        start_time: "Start time",
        stop_time: "Stop time",
        targeting: "Targeting",
        tracking_specs: "Tracking specs",
        updated_time: "Updated time",
        use_new_app_click: "Use new app click",
        actions: "Actions",
        app_store_clicks: "App store clicks",
        call_to_action_clicks: "Call to action clicks",
        card_views: "Card views",
        cost_per_action_type: "Cost per action type",
        cost_per_inline_link_click: "Cost per inline link click",
        cost_per_inline_post_engagement: "Cost per inline post engagement",
        cost_per_total_action: "Cost per total action",
        cost_per_unique_action_type: "Cost per unique action type",
        cost_per_unique_click: "Cost per unique click",
        cpm: "CPM",
        cpp: "CPP",
        ctr: "CTR",
        date_start: "Date start",
        date_stop: "Date stop",
        deeplink_clicks: "Deep link clicks",
        estimated_ad_recall_rate: "Estimated ad recall rate",
        estimated_ad_recall_rate_lower_bound: "Estimated ad recall rate lower bound",
        estimated_ad_recall_rate_upper_bound: "Estimated ad recall rate upper bound",
        frequency: "Frequency",
        impressions: "Impressions",
        inline_link_clicks: "Inline link clicks",
        inline_post_engagement: "Inline post engagement",
        reach: "Reach",
        social_clicks: "Social clicks",
        social_impressions: "Social impressions",
        social_reach: "Social reach",
        spend: "Spend",
        total_action_value: "Total action value",
        total_actions: "Total actions",
        total_unique_actions: "Total unique actions",
        unique_actions: "Unique actions",
        unique_clicks: "Unique clicks",
        unique_ctr: "Unique CTR",
        unique_impressions: "Unique impressions",
        unique_link_clicks_ctr: "Unique link clicks CTR",
        unique_social_clicks: "Unique social clicks",
        unique_social_impressions: "Unique social impressions",
        website_clicks: "Website clicks",
        website_ctr: "Website CTR"
    };

    service.objectives = {
        CANVAS_APP_ENGAGEMENT: "Canvas app engagement",
        CANVAS_APP_INSTALLS: "Canvas app installs",
        CONVERSIONS: "Conversions",
        EVENT_RESPONSES: "Event responses",
        EXTERNAL: "External",
        LEAD_GENERATION: "Lead generation",
        LINK_CLICKS: "Link clicks",
        LOCAL_AWARENESS: "Local awareness",
        MOBILE_APP_ENGAGEMENT: "Mobile app engagement",
        MOBILE_APP_INSTALLS: "Mobile app installs",
        OFFER_CLAIMS: "Offer claims",
        PAGE_LIKES: "Page likes",
        POST_ENGAGEMENT: "Post engagement",
        PRODUCT_CATALOG_SALES: "Product catalog sales",
        VIDEO_VIEWS: "Video views"
    };

    service.statuses = {
        ACTIVE: "Active",
        PAUSED: "Paused",
        ARCHIVED: "Archived",
        DELETED: "Deleted",
        CAMPAIGN_PAUSED: "Campaign paused",
        ADSET_PAUSED: "Ad set paused",
        PENDING_REVIEW: "Pending review",
        DISAPPROVED: "Disapproved",
        PREAPPROVED: "Preapproved",
        PENDING_BILLING_INFO: "Pending billing info"
    };

    service.buyingTypes = {
        AUCTION: "Auction",
        RESERVED: "Reserved"
    };

    service.billingEvents = {
        APP_INSTALLS: "App installs",
        CLICKS: "Clicks",
        IMPRESSIONS: "Impressions",
        LINK_CLICKS: "Link clicks",
        OFFER_CLAIMS: "Offer claims",
        PAGE_LIKES: "Page likes",
        POST_ENGAGEMENT: "Post engagement",
        VIDEO_VIEWS: "Video views"
    };

    service.optimizationGoals = {
        NONE: "None",
        APP_INSTALLS: "App installs",
        BRAND_AWARENESS: "Brand awareness",
        CLICKS: "Clicks",
        ENGAGED_USERS: "Engaged users",
        EXTERNAL: "External",
        EVENT_RESPONSES: "Event responses",
        IMPRESSIONS: "Impressions",
        LINK_CLICKS: "Link clicks",
        OFFER_CLAIMS: "Offer claims",
        OFFSITE_CONVERSIONS: "Offsite conversions",
        PAGE_ENGAGEMENT: "Page engagement",
        PAGE_LIKES: "Page likes",
        POST_ENGAGEMENT: "Post engagement",
        REACH: "Reach",
        SOCIAL_IMPRESSIONS: "Social impressions",
        VIDEO_VIEWS: "Video views"
    };

    service.productAdBehaviors = {
        REQUIRE_LAST_SEEN_PRODUCTS: "Require last seen products",
        REQUIRE_AVAILABLE_LAST_SEEN_PRODUCTS: "Require available last seen products",
        FALL_BACK_TO_FB_RECOMMENDATIONS: "Fall back to Facebook recommendations"
    };

    service.bidInfoActions = {
        ACTIONS: "Actions",
        CLICKS: "Clicks",
        REACH: "Reach"
    };

    service.dateIntervals = {
        today: "Today",
        yesterday: "Yesterday",
        last_3_days: "Last 3 days",
        this_week: "This week",
        last_week: "Last week",
        last_7_days: "Last 7 days",
        last_14_days: "Last 14 days",
        last_28_days: "Last 28 days",
        last_30_days: "Last 30 days",
        last_90_days: "Last 90 days",
        this_month: "This month",
        last_month: "Last month",
        this_quarter: "This quarter",
        last_3_months: "Last 3 months",
        lifetime: "Lifetime"
    };

    service.adGroups = {
        ad_groups: "Ad groups"
    };

    service.audiences = {
        audiences: "Audiences"
    };

    return service;
}]);
'use strict';

angular.module('modCommon').factory('Loading', [function () {
    var service = {};
    service.status = true;
    service.queue = 0;
    service.endpoints = {};

    service.set = function (boolean, url) {
        var aryUrl = url.split('?')[0].split("/");
        var aryUrlCopy = angular.copy(aryUrl);

        // Clean the URL
        aryUrlCopy = aryUrl.filter(function (item) {
            return item.length <= 30 && item.indexOf("act_") === -1 && isNaN(item);
        });

        var dataEndpoint = aryUrlCopy.join("");

        // Ignore html template requests
        if (dataEndpoint.indexOf(".html") !== -1) {
            return;
        }
        // Do not add these endpoints to the loading queue
        if (dataEndpoint === "apiusersfeed") return;

        // Set defaults if we've never seen this before
        if (!angular.isDefined(service.endpoints[dataEndpoint])) service.endpoints[dataEndpoint] = {};
        if (isNaN(service.endpoints[dataEndpoint].queue)) service.endpoints[dataEndpoint].queue = 0;
        if (typeof service.endpoints[dataEndpoint].status !== 'boolean') service.endpoints[dataEndpoint].status = true;

        // Modify loading queue
        if (boolean === true) {
            //console.log(dataEndpoint);
            service.endpoints[dataEndpoint].queue++;
            service.queue++;
        } else {
            service.endpoints[dataEndpoint].queue--;
            service.queue--;
        }

        // Endpoint specific loading
        service.endpoints[dataEndpoint].status = service.endpoints[dataEndpoint].queue > 0;
        // Total loading
        service.status = service.queue > 0;
    };

    service.get = function (file) {
        if (file !== 'All') {
            if (angular.isDefined(service.endpoints[file])) {
                return service.endpoints[file].status;
            } else {
                return false;
            }
        } else {
            return service.status;
        }
    };

    return service;
}]);
'use strict';

angular.module('modCommon').factory('Facebook', ['$q', 'Loading', function ($q, Loading) {
    var service = {};

    service.get = get;
    service.login = login;
    service.logout = logout;
    service.getLoginStatus = getLoginStatus;

    return service;

    function get(url, params) {
        var deferred = $q.defer();
        Loading.set(true, 'facebookrequest');
        FB.api(url, params, function (response) {
            if (!response || response.error) {
                Loading.set(false, 'facebookrequest');
                deferred.reject(response.error);
            } else {
                Loading.set(false, 'facebookrequest');
                deferred.resolve(response);
            }
        });
        return deferred.promise;
    }

    function login() {
        var deferred = $q.defer();
        Loading.set(true, 'facebookrequest');
        FB.login(function (response) {
            if (!response || response.error) {
                Loading.set(false, 'facebookrequest');
                deferred.reject(response.error);
            } else {
                Loading.set(false, 'facebookrequest');
                deferred.resolve(response);
            }
        }, {
            scope: 'publish_actions,manage_pages,email,public_profile,publish_pages,user_friends,ads_read,ads_management'
        });
        return deferred.promise;
    }

    function logout() {
        var deferred = $q.defer();
        Loading.set(true, 'facebookrequest');
        FB.logout(function (response) {
            if (!response || response.error) {
                Loading.set(false, 'facebookrequest');
                deferred.reject(response.error);
            } else {
                Loading.set(false, 'facebookrequest');
                deferred.resolve(response);
            }
        });
        return deferred.promise;
    }

    function getLoginStatus() {
        var deferred = $q.defer();
        Loading.set(true, 'facebookrequest');
        FB.getLoginStatus(function (response) {
            if (!response || response.error) {
                Loading.set(false, 'facebookrequest');
                deferred.reject(response.error);
            } else {
                Loading.set(false, 'facebookrequest');
                deferred.resolve(response);
            }
        });
        return deferred.promise;
    }
}]);
'use strict';

angular.module('modCommon').factory('Navigation', [function () {
    var service = {};
    service.active = "";

    service.all = [{ name: "Dashboard", icon: "fa-area-chart", url: "", children: [] }, { name: "Campaigns", icon: "fa-bullhorn", url: "campaigns", children: [{ name: "Ad Sets", icon: "fa-folder-open-o", url: "ad-sets", children: [{ name: "Ads", icon: "fa-image", url: "ads" }] }] }, { name: "Tracking", icon: "fa-bullseye", url: "tracking", children: [] }, { name: "Audiences", icon: "fa-users", url: "audiences", children: [] }, { name: "Ad Groups ", icon: "fa-files-o", url: "ad-groups", children: [] }, { name: "Automation", icon: "fa-gears", url: "automation", children: [] }, { name: "Help", icon: "fa-question-circle", url: "help", children: [] }];

    return service;
}]);
'use strict';

angular.module('modCommon').factory('User', [function () {
    var service = {};

    service.accessToken = "";
    service.userID = "";
    service.name = "";
    service.firstName = "";
    service.lastName = "";
    service.name = "";
    service.picture = "";
    service.authenticated = false;

    service.setUserInfo = setUserInfo;
    service.clearUserInfo = clearUserInfo;

    return service;

    function setUserInfo(loginInfo, userInfo) {
        service.authenticated = true;

        if (loginInfo) {
            if (loginInfo.accessToken) service.accessToken = loginInfo.accessToken;
            if (loginInfo.userID) service.userID = loginInfo.userID;
        }
        if (userInfo) {
            if (userInfo.name) service.name = userInfo.name;
            if (userInfo.first_name) service.firstName = userInfo.first_name;
            if (userInfo.last_name) service.lastName = userInfo.last_name;
            if (userInfo.picture && userInfo.picture.data && userInfo.picture.data.url) service.picture = userInfo.picture.data.url;
        }
    }

    function clearUserInfo() {
        service.accessToken = "";
        service.userID = "";
        service.name = "";
        service.firstName = "";
        service.lastName = "";
        service.picture = "";
        service.authenticated = false;
    }
}]);
'use strict';

angular.module('modCommon').factory('Version', ['$http', function ($http) {
    var service = {};

    service.get = get;

    return service;

    function get() {
        return $http.get('/version.json').then(function (response) {
            return response.data;
        });
    }
}]);
'use strict';

var modHelp = angular.module('modHelp', ['modCommon']);

modHelp.controller('ctrlHelp', [function () {}]);
'use strict';

var modTracking = angular.module('modTracking', ['modCommon']);

modTracking.controller('ctrlTracking', [function () {}]);
'use strict';

var modAdSets = angular.module('modAdSets');

modAdSets.directive('budgetSchedule', [function () {
    return {
        restrict: 'EA',
        scope: {},
        bindToController: {
            budgetSchedule: '='
        },
        controller: controller,
        link: link,
        controllerAs: "vm",
        replace: true,
        templateUrl: "/js/app/ad-sets/directives/budget-schedule/budget-schedule.html"
    };

    function controller($scope) {
        var vm = this;
    }

    function link(scope, elem, attrs) {}
}]);