'use strict';

(function () {
    var app = angular.module('app', ['modCommon']);

    app.config(['$locationProvider', '$httpProvider', function ($locationProvider, $httpProvider) {
        $locationProvider.html5Mode(true).hashPrefix('!');
        $httpProvider.defaults.headers.common['Content-Type'] = 'application/json';
        $httpProvider.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';

        // IE AJAX caching fix
        if (!$httpProvider.defaults.headers.get) {
            $httpProvider.defaults.headers.get = {};
        }

        // Disable IE ajax request caching
        $httpProvider.defaults.headers.get['If-Modified-Since'] = 'Mon, 26 Jul 1997 05:00:00 GMT';
    }]);

    app.run(['$window', 'Facebook', 'User', function ($window, Facebook, User) {
        $window.fbAsyncInit = function () {
            // Executed when the SDK is loaded

            FB.init({
                appId: '444109322439343',
                status: true,
                cookie: true,
                xfbml: true,
                version: 'v2.5'
            });

            Facebook.getLoginStatus().then(function (loginInfo) {
                if (loginInfo.status === 'connected') {
                    Facebook.getUserInfo().then(function (userInfo) {
                        User.setUserInfo(loginInfo.authResponse, userInfo);
                    });
                    Facebook.getUserAccounts(loginInfo.authResponse.userID).then(function (accounts) {
                        console.log(accounts);
                    });
                } else if (loginInfo.status === 'not_authorized') {
                    // The person is logged into Facebook, but not your app.

                } else {
                        // The person is not logged into Facebook, so we're not sure if
                        // they are logged into this app or not.
                    }
            });
        };

        /* Load SDK */
        (function (d, s, id) {
            var js,
                fjs = d.getElementsByTagName(s)[0];
            if (d.getElementById(id)) {
                return;
            }
            js = d.createElement(s);js.id = id;
            js.src = "//connect.facebook.net/en_US/sdk.js";
            fjs.parentNode.insertBefore(js, fjs);
        })(document, 'script', 'facebook-jssdk');
    }]);
})();
'use strict';

(function () {
    var modCommon = angular.module('modCommon', ['ngRoute', 'ngSanitize', 'ngAnimate']);
})();
'use strict';

(function () {
    'use strict';

    var modCommon = angular.module('modCommon');

    modCommon.controller('ctrlMain', ['$window', 'User', 'Facebook', function ($window, User, Facebook) {
        var vm = this;

        vm.user = {};

        vm.logout = logout;
        vm.login = login;

        _init();

        function _init() {
            vm.user = User;
        }

        function logout() {
            Facebook.logout().then(function () {
                User.clearUserInfo();
            });
        }

        function login() {
            Facebook.login().then(function (loginInfo) {
                Facebook.getUserInfo().then(function (userInfo) {
                    User.setUserInfo(loginInfo.authResponse, userInfo);
                });
                Facebook.getUserAccounts(loginInfo.authResponse.userID).then(function (accounts) {
                    console.log(accounts);
                });
            });
        }
    }]);
})();
'use strict';

angular.module('modCommon').factory('User', [function () {
    var service = {};

    service.accessToken = "";
    service.userID = "";
    service.name = "";
    service.picture = "";
    service.authenticated = false;

    service.setLogin = setLogin;
    service.setUserInfo = setUserInfo;
    service.clearUserInfo = clearUserInfo;

    return service;

    function setLogin(user) {
        if (user) {}
    }

    function setUserInfo(loginInfo, userInfo) {
        service.authenticated = true;

        if (loginInfo) {
            if (loginInfo.accessToken) service.accessToken = loginInfo.accessToken;
            if (loginInfo.userID) service.userID = loginInfo.userID;
        }
        if (userInfo) {
            if (userInfo.name) service.name = userInfo.name;
            if (userInfo.picture && userInfo.picture.data && userInfo.picture.data.url) service.picture = userInfo.picture.data.url;
        }
    }

    function clearUserInfo() {
        service.accessToken = "";
        service.userID = "";
        service.name = "";
        service.picture = "";
        service.authenticated = false;
    }
}]);
'use strict';

angular.module('modCommon').factory('Facebook', ['$q', function ($q) {
    var service = {};

    service.login = login;
    service.logout = logout;
    service.getUserInfo = getUserInfo;
    service.getUserAccounts = getUserAccounts;
    service.getLoginStatus = getLoginStatus;

    return service;

    function login() {
        var deferred = $q.defer();
        FB.login(function (response) {
            if (!response || response.error) {
                deferred.reject('Error occured');
            } else {
                deferred.resolve(response);
            }
        });
        return deferred.promise;
    }

    function logout() {
        var deferred = $q.defer();
        FB.logout(function (response) {
            if (!response || response.error) {
                deferred.reject('Error occured');
            } else {
                deferred.resolve(response);
            }
        });
        return deferred.promise;
    }

    function getUserInfo() {
        var deferred = $q.defer();
        FB.api('/me', {
            fields: 'id,name,picture,accounts'
        }, function (response) {
            if (!response || response.error) {
                deferred.reject('Error occured');
            } else {
                deferred.resolve(response);
            }
        });
        return deferred.promise;
    }

    function getUserAccounts(userId) {
        var deferred = $q.defer();
        FB.api('/' + userId + '/accounts', function (response) {
            if (!response || response.error) {
                deferred.reject('Error occured');
            } else {
                deferred.resolve(response);
            }
        });
        return deferred.promise;
    }

    function getLoginStatus() {
        var deferred = $q.defer();
        FB.getLoginStatus(function (response) {
            if (!response || response.error) {
                deferred.reject('Error occured');
            } else {
                deferred.resolve(response);
            }
        });
        return deferred.promise;
    }
}]);