'use strict';

(function () {
    var app = angular.module('app', ['modCommon']);

    app.config(['$locationProvider', '$httpProvider', function ($locationProvider, $httpProvider) {
        $locationProvider.html5Mode(true).hashPrefix('!');
        $httpProvider.defaults.headers.common['Content-Type'] = 'application/json';
        $httpProvider.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';

        // IE AJAX caching fix
        if (!$httpProvider.defaults.headers.get) {
            $httpProvider.defaults.headers.get = {};
        }

        // Disable IE ajax request caching
        $httpProvider.defaults.headers.get['If-Modified-Since'] = 'Mon, 26 Jul 1997 05:00:00 GMT';
    }]);

    app.run(['$window', 'Facebook', 'User', 'Accounts', function ($window, Facebook, User, Accounts) {
        $window.fbAsyncInit = function () {
            // Executed when the SDK is loaded

            FB.init({
                // appId: '444109322439343',
                appId: '444116655771943',
                status: true,
                cookie: true,
                xfbml: true,
                version: 'v2.5'
            });

            Facebook.getLoginStatus().then(function (loginInfo) {
                if (loginInfo.status === 'connected') {
                    var accountId = $window.localStorage.getItem("activeAccountId");

                    if (accountId) {
                        Accounts.active = accountId;
                    }

                    Facebook.getUserInfo().then(function (userInfo) {
                        User.setUserInfo(loginInfo.authResponse, userInfo);
                    });

                    Accounts.getAll(loginInfo.authResponse.userID);
                }
            });
        };

        /* Load SDK */
        (function (d, s, id) {
            var js,
                fjs = d.getElementsByTagName(s)[0];
            if (d.getElementById(id)) {
                return;
            }
            js = d.createElement(s);js.id = id;
            js.src = "//connect.facebook.net/en_US/sdk.js";
            fjs.parentNode.insertBefore(js, fjs);
        })(document, 'script', 'facebook-jssdk');
    }]);
})();
'use strict';

(function () {
    var modCommon = angular.module('modCommon', ['ngRoute', 'ngSanitize', 'ngAnimate']);
})();
'use strict';

(function () {
    'use strict';

    var modCommon = angular.module('modCommon');

    modCommon.controller('ctrlMain', ['$window', 'User', 'Facebook', 'Accounts', 'Navigation', function ($window, User, Facebook, Accounts, Navigation) {
        var vm = this;

        vm.user = {};
        vm.accounts = {};
        vm.navigation = {};

        vm.logout = logout;
        vm.login = login;

        _init();

        function _init() {
            vm.user = User;
            vm.accounts = Accounts;
            vm.navigation = Navigation;
        }

        function logout() {
            Facebook.logout().then(function () {
                User.clearUserInfo();
            });
        }

        function login() {
            Facebook.login().then(function (loginInfo) {
                var accountId = $window.localStorage.getItem("activeAccountId");

                if (accountId) {
                    Accounts.active = accountId;
                }

                Facebook.getUserInfo().then(function (userInfo) {
                    User.setUserInfo(loginInfo.authResponse, userInfo);
                });

                Accounts.getAll(loginInfo.authResponse.userID);
            });
        }
    }]);
})();
'use strict';

(function () {
    'use strict';

    var modCommon = angular.module('modCommon');

    modCommon.directive('dropMenu', ['$timeout', function ($timeout) {
        return {
            restrict: 'A',
            link: function link(scope, el, attr) {
                var _timerId = null;
                var isOpen = false;

                var onClick = function onClick() {
                    clearTimer();
                    if (isOpen) {
                        isOpen = false;
                        el.removeClass("open");
                    } else {
                        isOpen = true;
                        el.addClass("open");
                    }
                };

                var onMouseEnter = function onMouseEnter() {
                    if (isOpen) {
                        clearTimer();
                        cancelAllHover();
                        el.addClass("open");
                    }
                };

                var onMouseLeave = function onMouseLeave() {
                    startTimer();
                };

                var startTimer = function startTimer() {
                    clearTimer();
                    _timerId = $timeout(function () {
                        isOpen = false;
                        el.removeClass("open");
                    }, 500);
                };

                var clearTimer = function clearTimer() {
                    if (_timerId !== null) {
                        $timeout.cancel(_timerId);
                        _timerId = null;
                    }
                };

                var cancelAllHover = function cancelAllHover() {
                    $('[drop-menu]').removeClass("open");
                };

                el.bind('click', onClick);
                el.bind('mouseleave', onMouseLeave);
                el.bind('mouseenter', onMouseEnter);
            }
        };
    }]);
})();
'use strict';

angular.module('modCommon').factory('Accounts', ['$window', 'Facebook', function ($window, Facebook) {
    var service = {};

    service.all = [];
    service.active = "";

    service.getAll = getAll;
    service.setActive = setActive;
    service.getAccountName = getAccountName;

    return service;

    function getAll(userId) {
        return Facebook.getUserAccounts(userId).then(function (results) {
            service.all = results.data;
            return results.data;
        });
    }

    function setActive(accountId) {
        if (accountId) {
            service.active = accountId;
            $window.localStorage.setItem("activeAccountId", accountId);
        }
    }

    function getAccountName(accountId) {
        if (accountId) {
            if (service.all && service.all.length > 0) {
                return service.all.find(function (account) {
                    return account.id === accountId;
                }).name;
            } else {
                return "No accounts available";
            }
        } else {
            return "No account selected";
        }
    }
}]);
'use strict';

angular.module('modCommon').factory('Facebook', ['$q', function ($q) {
    var service = {};

    service.login = login;
    service.logout = logout;
    service.getUserInfo = getUserInfo;
    service.getUserAccounts = getUserAccounts;
    service.getLoginStatus = getLoginStatus;

    return service;

    function login() {
        var deferred = $q.defer();
        FB.login(function (response) {
            if (!response || response.error) {
                deferred.reject('Error occured');
            } else {
                deferred.resolve(response);
            }
        });
        return deferred.promise;
    }

    function logout() {
        var deferred = $q.defer();
        FB.logout(function (response) {
            if (!response || response.error) {
                deferred.reject('Error occured');
            } else {
                deferred.resolve(response);
            }
        });
        return deferred.promise;
    }

    function getUserInfo() {
        var deferred = $q.defer();
        FB.api('/me', {
            fields: 'id,name,first_name,last_name,picture'
        }, function (response) {
            if (!response || response.error) {
                deferred.reject('Error occured');
            } else {
                deferred.resolve(response);
            }
        });
        return deferred.promise;
    }

    function getUserAccounts(userId) {
        var deferred = $q.defer();
        FB.api('/' + userId + '/accounts', function (response) {
            if (!response || response.error) {
                deferred.reject('Error occured');
            } else {
                deferred.resolve(response);
            }
        });
        return deferred.promise;
    }

    function getLoginStatus() {
        var deferred = $q.defer();
        FB.getLoginStatus(function (response) {
            if (!response || response.error) {
                deferred.reject('Error occured');
            } else {
                deferred.resolve(response);
            }
        });
        return deferred.promise;
    }
}]);
'use strict';

angular.module('modCommon').factory('Navigation', [function () {
    var service = {};

    service.all = [{ name: "Dashboard", icon: "fa-area-chart", url: "/", children: [] }, { name: "Campaigns", icon: "fa-bullhorn", url: "/campaigns", children: [] }, { name: "Tracking", icon: "fa-bullseye", url: "/tracking", children: [{ name: "Click Tags", url: "/tracking/click-tags" }, { name: "Pixels", url: "/tracking/pixels" }] }, { name: "Preset Audiences", icon: "fa-users", url: "/preset-audiences", children: [] }, { name: "Preset Ad Groups ", icon: "fa-picture-o", url: "/preset-ad-groups", children: [] }, { name: "Automation", icon: "fa-gears", url: "/automation", children: [] }, { name: "Help", icon: "fa-question-circle", url: "/help", children: [] }];

    return service;
}]);
'use strict';

angular.module('modCommon').factory('User', [function () {
    var service = {};

    service.accessToken = "";
    service.userID = "";
    service.name = "";
    service.firstName = "";
    service.lastName = "";
    service.name = "";
    service.picture = "";
    service.authenticated = false;

    service.setUserInfo = setUserInfo;
    service.clearUserInfo = clearUserInfo;

    return service;

    function setUserInfo(loginInfo, userInfo) {
        service.authenticated = true;

        if (loginInfo) {
            if (loginInfo.accessToken) service.accessToken = loginInfo.accessToken;
            if (loginInfo.userID) service.userID = loginInfo.userID;
        }
        if (userInfo) {
            if (userInfo.name) service.name = userInfo.name;
            if (userInfo.first_name) service.firstName = userInfo.first_name;
            if (userInfo.last_name) service.lastName = userInfo.last_name;
            if (userInfo.picture && userInfo.picture.data && userInfo.picture.data.url) service.picture = userInfo.picture.data.url;
        }
    }

    function clearUserInfo() {
        service.accessToken = "";
        service.userID = "";
        service.name = "";
        service.firstName = "";
        service.lastName = "";
        service.picture = "";
        service.authenticated = false;
    }
}]);