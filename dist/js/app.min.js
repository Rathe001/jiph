'use strict';

var app = angular.module('app', ['modTemplates', 'modAutomation', 'modCampaigns', 'modAdSets', 'modAds', 'modCommon', 'modDashboard', 'modHelp', 'modPresetAdGroups', 'modPresetAudiences', 'modTracking']);

app.config(['$routeProvider', '$locationProvider', '$httpProvider', function ($routeProvider, $locationProvider, $httpProvider) {
    $routeProvider.when('/', {
        templateUrl: '/js/app/dashboard/controllers/dashboard/dashboard.html',
        controller: 'ctrlDashboard',
        controllerAs: 'vm'
    }).when('/ad-sets', {
        templateUrl: '/js/app/ad-sets/controllers/ad-sets/ad-sets.html',
        controller: 'ctrlAdSets',
        controllerAs: 'vm'
    }).when('/ads', {
        templateUrl: '/js/app/ads/controllers/ads/ads.html',
        controller: 'ctrlAds',
        controllerAs: 'vm'
    }).when('/automation', {
        templateUrl: '/js/app/automation/controllers/automation/automation.html',
        controller: 'ctrlAutomation',
        controllerAs: 'vm'
    }).when('/campaigns', {
        templateUrl: '/js/app/campaigns/controllers/campaigns/campaigns.html',
        controller: 'ctrlCampaigns',
        controllerAs: 'vm'
    }).when('/help', {
        templateUrl: '/js/app/help/controllers/help/help.html',
        controller: 'ctrlHelp',
        controllerAs: 'vm'
    }).when('/preset-ad-groups', {
        templateUrl: '/js/app/preset-ad-groups/controllers/preset-ad-groups/preset-ad-groups.html',
        controller: 'ctrlPresetAdGroups',
        controllerAs: 'vm'
    }).when('/preset-audiences', {
        templateUrl: '/js/app/preset-audiences/controllers/preset-audiences/preset-audiences.html',
        controller: 'ctrlPresetAudiences',
        controllerAs: 'vm'
    }).when('/tracking', {
        templateUrl: '/js/app/tracking/controllers/tracking/tracking.html',
        controller: 'ctrlTracking',
        controllerAs: 'vm'
    }).otherwise({
        redirectTo: '/'
    });

    $locationProvider.html5Mode(true).hashPrefix('!');
    $httpProvider.defaults.headers.common['Content-Type'] = 'application/json';
    $httpProvider.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';

    // IE AJAX caching fix
    if (!$httpProvider.defaults.headers.get) {
        $httpProvider.defaults.headers.get = {};
    }

    // Disable IE ajax request caching
    $httpProvider.defaults.headers.get['If-Modified-Since'] = 'Mon, 26 Jul 1997 05:00:00 GMT';
}]);

app.run(['$window', 'Facebook', 'User', 'Accounts', function ($window, Facebook, User, Accounts) {
    $window.fbAsyncInit = function () {
        // Executed when the SDK is loaded

        FB.init({
            appId: '444109322439343',
            //appId: '444116655771943',
            status: true,
            cookie: true,
            xfbml: true,
            version: 'v2.5'
        });

        Facebook.getLoginStatus().then(function (loginInfo) {
            if (loginInfo.status === 'connected') {
                var accountId = $window.localStorage.getItem("activeAccountId");

                if (accountId) {
                    Accounts.active = accountId;
                }

                Facebook.get('/me', {
                    fields: 'id,name,first_name,last_name,picture'
                }).then(function (userInfo) {
                    User.setUserInfo(loginInfo.authResponse, userInfo);
                });

                Accounts.getAll(loginInfo.authResponse.userID).then(function () {
                    if (!Accounts.all.find(function (account) {
                        return account.id === Accounts.active;
                    })) {
                        Accounts.setActive("");
                    }
                });
            }
        });
    };

    /* Load SDK */
    (function (d, s, id) {
        var js,
            fjs = d.getElementsByTagName(s)[0];
        if (d.getElementById(id)) {
            return;
        }
        js = d.createElement(s);js.id = id;
        js.src = "//connect.facebook.net/en_US/sdk.js";
        fjs.parentNode.insertBefore(js, fjs);
    })(document, 'script', 'facebook-jssdk');
}]);
'use strict';

var modCommon = angular.module('modCommon', ['ngRoute', 'ngSanitize', 'ngAnimate']);
'use strict';

var modAutomation = angular.module('modAutomation', []);
'use strict';

var modCampaigns = angular.module('modCampaigns', []);
'use strict';

var modAdSets = angular.module('modAdSets', []);
'use strict';

var modAds = angular.module('modAds', []);
'use strict';

var modDashboard = angular.module('modDashboard', []);
'use strict';

var modHelp = angular.module('modHelp', []);
'use strict';

var modPresetAdGroups = angular.module('modPresetAdGroups', []);
'use strict';

var modPresetAudiences = angular.module('modPresetAudiences', []);
'use strict';

var modTracking = angular.module('modTracking', []);
'use strict';

angular.module('modAdSets').factory('AdSets', ['$q', '$window', 'Loading', function ($q, $window, Loading) {
    var service = {};

    var defaultDataColumns = {
        name: true,
        id: false,
        adlabels: false,
        adset_schedule: false,
        account_id: false,
        bid_amount: true,
        bid_info: true,
        billing_event: true,
        campaign: false,
        campaign_id: false,
        configured_status: false,
        created_time: false,
        creative_sequence: false,
        effective_status: true,
        end_time: true,
        frequency_cap: false,
        frequency_cap_reset_period: false,
        is_autobid: true,
        lifetime_frequency_cap: false,
        lifetime_imps: false,
        optimization_goal: true,
        product_ad_behavior: false,
        promoted_object: false,
        rf_prediction_id: false,
        rtb_flag: false,
        start_time: true,
        targeting: false,
        updated_time: false,
        use_new_app_click: false,
        pacing_type: false,
        budget_remaining: true,
        daily_budget: true,
        lifetime_budget: true
    };

    service.getAll = getAll;
    service.getDataColumns = getDataColumns;
    service.setDataColumns = setDataColumns;

    return service;

    function getAll(facebookAdAccountId) {
        var deferred = $q.defer();
        var payload = {
            date_preset: 'lifetime',
            fields: 'name,id,adlabels,adset_schedule,account_id,bid_amount,bid_info,billing_event,campaign{id,name},campaign_id,configured_status,created_time,creative_sequence,effective_status,end_time,frequency_cap,frequency_cap_reset_period,is_autobid,lifetime_frequency_cap,lifetime_imps,optimization_goal,product_ad_behavior,promoted_object,rf_prediction_id,rtb_flag,start_time,targeting,updated_time,use_new_app_click,pacing_type,budget_remaining,daily_budget,lifetime_budget',
            limit: 5000
        };

        Loading.set(true, 'facebookrequest');
        FB.api('/' + facebookAdAccountId + '/adsets', payload, function (response) {
            if (!response || response.error) {
                Loading.set(false, 'facebookrequest');
                deferred.reject(response.error);
            } else {
                Loading.set(false, 'facebookrequest');
                deferred.resolve(response);
            }
        });
        return deferred.promise;
    }

    function getDataColumns() {
        var columns = JSON.parse($window.localStorage.getItem("adSetColumns"));

        if (!columns) columns = defaultDataColumns;

        return columns;
    }

    function setDataColumns(columns) {
        $window.localStorage.setItem("adSetColumns", JSON.stringify(columns));
    }
}]);
'use strict';

angular.module('modAds').factory('Ads', ['$q', '$window', 'Loading', function ($q, $window, Loading) {
    var service = {};

    var defaultDataColumns = {
        id: false,
        name: true,
        account_id: false,
        adset: false,
        campaign: false,
        adlabels: false,
        adset_id: false,
        bid_amount: true,
        bid_info: true,
        bid_type: true,
        configured_status: true,
        conversion_specs: false,
        created_time: false,
        creative: false,
        effective_status: true,
        last_updated_by_app_id: false,
        tracking_specs: false,
        updated_time: false,
        campaign_id: false,
        ad_review_feedback: false
    };

    service.getAll = getAll;
    service.getDataColumns = getDataColumns;
    service.setDataColumns = setDataColumns;

    return service;

    function getAll(facebookAdAccountId) {
        var deferred = $q.defer();
        var payload = {
            date_preset: 'lifetime',
            fields: 'id,name,account_id,adset{id,name},campaign{id,name},adlabels,adset_id,bid_amount,bid_info,bid_type,configured_status,conversion_specs,created_time,creative,effective_status,last_updated_by_app_id,tracking_specs,updated_time,campaign_id,ad_review_feedback',
            limit: 5000
        };

        Loading.set(true, 'facebookrequest');
        FB.api('/' + facebookAdAccountId + '/ads', payload, function (response) {
            if (!response || response.error) {
                Loading.set(false, 'facebookrequest');
                deferred.reject(response.error);
            } else {
                Loading.set(false, 'facebookrequest');
                deferred.resolve(response);
            }
        });
        return deferred.promise;
    }

    function getDataColumns() {
        var columns = JSON.parse($window.localStorage.getItem("adColumns"));

        if (!columns) columns = defaultDataColumns;

        return columns;
    }

    function setDataColumns(columns) {
        $window.localStorage.setItem("adColumns", JSON.stringify(columns));
    }
}]);
'use strict';

angular.module('modCampaigns').factory('Campaigns', ['$q', '$window', 'Loading', function ($q, $window, Loading) {
    var service = {};

    var defaultDataColumns = {
        name: true,
        id: false,
        adlabels: false,
        account_id: false,
        buying_type: true,
        can_use_spend_cap: false,
        configured_status: true,
        created_time: false,
        effective_status: true,
        objective: true,
        start_time: true,
        stop_time: true,
        updated_time: false,
        spend_cap: false
    };

    service.getAll = getAll;
    service.getDataColumns = getDataColumns;
    service.setDataColumns = setDataColumns;

    return service;

    function getAll(facebookAdAccountId) {
        var deferred = $q.defer();
        var payload = {
            date_preset: 'lifetime',
            fields: 'name,id,adlabels,account_id,buying_type,can_use_spend_cap,configured_status,created_time,effective_status,objective,start_time,stop_time,updated_time,spend_cap',
            limit: 5000
        };

        Loading.set(true, 'facebookrequest');
        FB.api('/' + facebookAdAccountId + '/campaigns', payload, function (response) {
            if (!response || response.error) {
                Loading.set(false, 'facebookrequest');
                deferred.reject(response.error);
            } else {
                Loading.set(false, 'facebookrequest');
                deferred.resolve(response);
            }
        });
        return deferred.promise;
    }

    function getDataColumns() {
        var columns = JSON.parse($window.localStorage.getItem("campaignColumns"));

        if (!columns) columns = defaultDataColumns;

        return columns;
    }

    function setDataColumns(columns) {
        $window.localStorage.setItem("campaignColumns", JSON.stringify(columns));
    }
}]);
'use strict';

var modDashboard = angular.module('modDashboard');

modDashboard.factory('Dashboard', ['$q', 'Loading', function ($q, Loading) {
    var service = {};

    service.generateReport = generateReport;
    service.checkReportStatus = checkReportStatus;
    service.fetchAsyncReport = fetchAsyncReport;

    return service;

    function generateReport(facebookAdAccountId, since, until) {
        var deferred = $q.defer();
        Loading.set(true, 'facebookrequest');
        FB.api('/' + facebookAdAccountId + '/insights', 'post', {
            time_increment: 1,
            level: 'campaign',
            time_range: {
                since: since,
                until: until
            },
            fields: 'spend,impressions,reach',
            default_summary: true
        }, function (response) {
            if (!response || response.error) {
                Loading.set(false, 'facebookrequest');
                deferred.reject(response.error);
            } else {
                Loading.set(false, 'facebookrequest');
                deferred.resolve(response);
            }
        });
        return deferred.promise;
    }

    function checkReportStatus(asyncReportId) {
        // Loading is handled in controller due to timeout delay
        var deferred = $q.defer();
        FB.api('/' + asyncReportId, function (response) {
            if (!response || response.error) {
                deferred.reject(response.error);
            } else {
                deferred.resolve(response);
            }
        });
        return deferred.promise;
    }

    function fetchAsyncReport(asyncReportId) {
        Loading.set(true, 'facebookrequest');
        var deferred = $q.defer();
        FB.api('/' + asyncReportId + '/insights', function (response) {
            if (!response || response.error) {
                Loading.set(false, 'facebookrequest');
                deferred.reject(response.error);
            } else {
                Loading.set(false, 'facebookrequest');
                deferred.resolve(response);
            }
        });
        return deferred.promise;
    }
}]);
'use strict';

var modAdSets = angular.module('modAdSets');

modAdSets.controller('ctrlAdSets', ['$scope', 'AdSets', 'Accounts', 'Dictionary', 'Currency', function ($scope, AdSets, Accounts, Dictionary, Currency) {
    var vm = this;

    vm.adSets = [];
    vm.columns = {};
    vm.dictionary = {};
    vm.currency = {};
    vm.orderBy = "";
    vm.error = "";

    vm.toggleColumn = toggleColumn;
    vm.toggleOrderBy = toggleOrderBy;

    $scope.$watch(function () {
        return Accounts.active;
    }, function (newVal) {
        if (newVal) {
            _getAll();
        }
    });

    _init();

    function _init() {
        vm.dictionary = Dictionary;
        vm.currency = Currency;
        vm.columns = AdSets.getDataColumns();
    }

    function _getAll() {
        vm.adSets = [];
        vm.error = "";

        AdSets.getAll(Accounts.active).then(function (response) {
            if (response.data.length > 0) {
                vm.adSets = _processResponse(response.data);
            } else {
                vm.error = "No ad sets found.";
            }
        }, function (error) {
            vm.error = error.message;
        });
    }

    function _processResponse(input) {
        var output = input;

        for (var i = 0; i < input.length; i++) {
            for (var j in input[i]) {
                switch (j) {
                    case "budget_remaining":
                    case "daily_budget":
                    case "lifetime_budget":
                    case "bid_amount":
                        output[i][j] = parseInt(output[i][j]);
                        break;
                }
            }
        }

        return output;
    }

    function toggleColumn(col) {
        vm.columns[col] = !vm.columns[col];
        AdSets.setDataColumns(vm.columns);
    }

    function toggleOrderBy(col) {
        if (vm.orderBy === col) {
            if (col[0] === "-") {
                vm.orderBy.replace("-", "");
            } else {
                vm.orderBy = "-" + col;
            }
        } else {
            vm.orderBy = col;
        }
    }
}]);
'use strict';

var modAds = angular.module('modAds');

modAds.controller('ctrlAds', ['$scope', 'Ads', 'Accounts', 'Currency', 'Dictionary', function ($scope, Ads, Accounts, Currency, Dictionary) {
    var vm = this;

    vm.ads = [];
    vm.columns = {};
    vm.dictionary = {};
    vm.currency = {};
    vm.orderBy = "";
    vm.error = "";

    vm.toggleColumn = toggleColumn;
    vm.toggleOrderBy = toggleOrderBy;

    $scope.$watch(function () {
        return Accounts.active;
    }, function (newVal) {
        if (newVal) {
            _getAll();
        }
    });

    _init();

    function _init() {
        vm.currency = Currency;
        vm.dictionary = Dictionary;
        vm.columns = Ads.getDataColumns();
    }

    function _getAll() {
        vm.ads = [];
        vm.error = "";

        Ads.getAll(Accounts.active).then(function (response) {
            if (response.data.length > 0) {
                vm.ads = _processResponse(response.data);
            } else {
                vm.error = "No ads found.";
            }
        }, function (error) {
            vm.error = error.message;
        });
    }

    function _processResponse(input) {
        var output = input;

        for (var i = 0; i < input.length; i++) {
            for (var j in input[i]) {
                switch (j) {
                    case "budget_remaining":
                    case "daily_budget":
                    case "lifetime_budget":
                    case "bid_amount":
                        output[i][j] = parseInt(output[i][j]);
                        break;
                }
            }
        }

        return output;
    }

    function toggleColumn(col) {
        vm.columns[col] = !vm.columns[col];
        Ads.setDataColumns(vm.columns);
    }

    function toggleOrderBy(col) {
        if (vm.orderBy === col) {
            if (col[0] === "-") {
                vm.orderBy.replace("-", "");
            } else {
                vm.orderBy = "-" + col;
            }
        } else {
            vm.orderBy = col;
        }
    }
}]);
'use strict';

var modAutomation = angular.module('modAutomation', ['modCommon']);

modAutomation.controller('ctrlAutomation', [function () {}]);
'use strict';

var modCommon = angular.module('modCommon');

modCommon.controller('ctrlMain', ['$scope', '$interval', '$location', '$window', 'User', 'Facebook', 'Accounts', 'Navigation', 'Loading', 'Version', function ($scope, $interval, $location, $window, User, Facebook, Accounts, Navigation, Loading, Version) {
    var vm = this;

    vm.user = {};
    vm.accounts = {};
    vm.navigation = {};
    vm.loading = {};
    vm.version = "";
    vm.year = "";

    vm.logout = logout;
    vm.login = login;

    $scope.$on('$locationChangeStart', function (event) {
        Navigation.active = $location.path();
    });

    _init();

    function _init() {
        vm.user = User;
        vm.accounts = Accounts;
        vm.navigation = Navigation;
        vm.loading = Loading;

        vm.year = new Date().getFullYear();
        Version.get().then(function (v) {
            return vm.version = v.version;
        });

        var versionCheck = $interval(function () {
            Version.get().then(function (v) {
                if (vm.version !== v.version) {
                    if ($window.confirm("A newer version of the Jiph application is available. Please click \"OK\" to refresh the application.")) {
                        console.log("Hit!");
                        $window.location.href = "/";
                    }
                }
            });
        }, 20000);
    }

    function logout() {
        Facebook.logout().then(function () {
            User.clearUserInfo();
        });
    }

    function login() {
        Facebook.login().then(function (loginInfo) {
            var accountId = $window.localStorage.getItem("activeAccountId");

            if (accountId) {
                Accounts.active = accountId;
            }

            Facebook.get('/me', { fields: 'id,name,first_name,last_name,picture' }).then(function (userInfo) {
                User.setUserInfo(loginInfo.authResponse, userInfo);
            });

            Accounts.getAll(loginInfo.authResponse.userID).then(function () {
                if (!Accounts.all.find(function (account) {
                    return account.id === Accounts.active;
                })) {
                    Accounts.setActive("");
                }
            });
        });
    }
}]);
'use strict';

var modCommon = angular.module('modCommon');

modCommon.directive('dropMenu', ['$timeout', function ($timeout) {
    return {
        restrict: 'A',
        link: function link(scope, el, attr) {
            var _timerId = null;
            var isOpen = false;

            var onClick = function onClick() {
                clearTimer();
                if (isOpen) {
                    isOpen = false;
                    el.removeClass("open");
                } else {
                    isOpen = true;
                    el.addClass("open");
                }
            };

            var onMouseEnter = function onMouseEnter() {
                if (isOpen) {
                    clearTimer();
                    cancelAllHover();
                    el.addClass("open");
                }
            };

            var onMouseLeave = function onMouseLeave() {
                startTimer();
            };

            var startTimer = function startTimer() {
                clearTimer();
                _timerId = $timeout(function () {
                    isOpen = false;
                    el.removeClass("open");
                }, 500);
            };

            var clearTimer = function clearTimer() {
                if (_timerId !== null) {
                    $timeout.cancel(_timerId);
                    _timerId = null;
                }
            };

            var cancelAllHover = function cancelAllHover() {
                $('[drop-menu]').removeClass("open");
            };

            el.bind('click', onClick);
            el.bind('mouseleave', onMouseLeave);
            el.bind('mouseenter', onMouseEnter);
        }
    };
}]);
'use strict';

var modCampaigns = angular.module('modCampaigns');

modCampaigns.controller('ctrlCampaigns', ['$scope', 'Campaigns', 'Accounts', 'Dictionary', 'Currency', function ($scope, Campaigns, Accounts, Dictionary, Currency) {
    var vm = this;

    vm.campaigns = [];
    vm.columns = {};
    vm.dictionary = {};
    vm.currency = {};
    vm.orderBy = "";
    vm.error = "";

    vm.toggleColumn = toggleColumn;
    vm.toggleOrderBy = toggleOrderBy;

    $scope.$watch(function () {
        return Accounts.active;
    }, function (newVal) {
        if (newVal) {
            _getAll();
        }
    });

    _init();

    function _init() {
        vm.dictionary = Dictionary;
        vm.currency = Currency;
        vm.columns = Campaigns.getDataColumns();
    }

    function _getAll() {
        vm.campaigns = [];
        vm.error = "";

        Campaigns.getAll(Accounts.active).then(function (response) {
            if (response.data.length > 0) {
                vm.campaigns = _processResponse(response.data);
            } else {
                vm.error = "No campaigns found.";
            }
        }, function (error) {
            vm.error = error.message;
        });
    }

    function _processResponse(input) {
        var output = input;

        for (var i = 0; i < input.length; i++) {
            for (var j in input[i]) {
                switch (j) {
                    case "budget_remaining":
                    case "daily_budget":
                    case "lifetime_budget":
                    case "bid_amount":
                        output[i][j] = parseInt(output[i][j]);
                        break;
                }
            }
        }

        return output;
    }

    function toggleColumn(col) {
        vm.columns[col] = !vm.columns[col];
        Campaigns.setDataColumns(vm.columns);
    }

    function toggleOrderBy(col) {
        if (vm.orderBy === col) {
            if (col[0] === "-") {
                vm.orderBy.replace("-", "");
            } else {
                vm.orderBy = "-" + col;
            }
        } else {
            vm.orderBy = col;
        }
    }
}]);
'use strict';

angular.module('modCommon').factory('Currency', ['Accounts', function (Accounts) {
    var service = {};

    service.to = to;
    service.from = from;

    return service;

    function to(val) {
        return isNaN(val / Accounts.getCurrencyOffset()) ? null : val / Accounts.getCurrencyOffset();
    }

    function from(val) {
        return isNaN(val * Accounts.getCurrencyOffset()) ? null : val * Accounts.getCurrencyOffset();
    }
}]);
'use strict';

angular.module('modCommon').factory('Accounts', ['$window', 'Facebook', function ($window, Facebook) {
    var service = {};

    service.all = [];
    service.active = "";

    service.getAll = getAll;
    service.setActive = setActive;
    service.getActive = getActive;
    service.getAccountName = getAccountName;
    service.getCurrencyOffset = getCurrencyOffset;

    return service;

    function getAll() {
        return Facebook.get('/me/adaccounts', { fields: 'name,id,owner_business,currency,amount_spent,spend_cap' }).then(function (results) {
            service.all = results.data;
            return results.data;
        });
    }

    function setActive(accountId) {
        if (accountId) {
            service.active = accountId;
            $window.localStorage.setItem("activeAccountId", accountId);
        } else {
            service.active = "";
            $window.localStorage.removeItem("activeAccountId");
        }
    }

    function getActive() {
        if (service.all.length > 0 && service.active) {
            return service.all.find(function (account) {
                return account.id === service.active;
            });
        } else {
            return {};
        }
    }

    function getAccountName(accountId) {
        if (accountId) {
            if (service.all && service.all.length > 0) {
                return service.all.find(function (account) {
                    return account.id === accountId;
                }).name;
            } else {
                return "No accounts available";
            }
        } else {
            return "No account selected";
        }
    }

    function getCurrencyOffset() {
        var c = service.getActive().currency;

        if (c === "CLP" || c === "COP" || c === "CRC" || c === "HUF" || c === "ISK" || c === "IDR" || c === "JPY" || c === "KRW" || c === "PYG" || c === "TWD" || c === "VND") {
            return 1;
        } else {
            return 100;
        }
    }
}]);
'use strict';

angular.module('modCommon').factory('EstimateTimeToCompletion', [function () {
    var service = {};

    service.get = get;

    return service;

    function get(startTime, currentTime, percentageComplete) {
        var elapsedTime = currentTime - startTime;
        var estimated = elapsedTime / percentageComplete * 100;

        if (isNaN(estimated) || estimated === 0 || estimated === Infinity) estimated = 2;

        return (estimated - elapsedTime) * 1000 / 2 < 2000 ? 2000 : (estimated - elapsedTime) * 1000 / 2;
    }
}]);
'use strict';

angular.module('modCommon').factory('Dictionary', [function () {
    var service = {};

    service.terms = {
        ad_review_feedback: "Ad review feedback",
        adlabels: "Ad labels",
        ads: "Ads",
        adset: "Ad set",
        adsets: "Ad sets",
        adset_id: "Ad set ID",
        adset_schedule: "Ad set schedule",
        account_id: "Account ID",
        bid_amount: "Bid amount",
        bid_info: "Bid info",
        bid_type: "Bid type",
        billing_event: "Billing event",
        budget_remaining: "Budget remaining",
        buying_type: "buying type",
        campaign: "Campaign",
        campaigns: "Campaigns",
        campaign_id: "Campaign ID",
        can_use_spend_cap: "Can use spend cap",
        configured_status: "Configured status",
        conversion_specs: "Conversion specs",
        create_ad: "Create Ad",
        create_ad_set: "Create Ad Set",
        create_campaign: "Create Campaign",
        created_time: "Created time",
        creative: "Creative",
        creative_sequence: "Creative sequence",
        customize_columns: "Customize Columns",
        daily_budget: "Daily budget",
        effective_status: "Effective status",
        end_time: "End time",
        frequency_cap: "Frequency cap",
        frequency_cap_reset_period: "Frequency cap reset period",
        id: "ID",
        is_autobid: "Is auto bid",
        last_updated_by_app_id: "Last updated by app ID",
        lifetime_budget: "Lifetime budget",
        lifetime_frequency_cap: "Lifetime frequency cap",
        lifetime_imps: "Lifetime impressions",
        name: "Name",
        objective: "Objective",
        optimization_goal: "Optimization goal",
        pacing_type: "Pacing type",
        product_ad_behavior: "Product ad behavior",
        promoted_object: "Promoted object",
        rf_prediction_id: "RF prediction ID",
        rtb_flag: "RTB flag",
        spend_cap: "Spend cap",
        start_time: "Start time",
        stop_time: "Stop time",
        targeting: "Targeting",
        tracking_specs: "Tracking specs",
        updated_time: "Updated time",
        use_new_app_click: "Use new app click"
    };

    service.objectives = {
        CANVAS_APP_ENGAGEMENT: "Canvas app engagement",
        CANVAS_APP_INSTALLS: "Canvas app installs",
        CONVERSIONS: "Conversions",
        EVENT_RESPONSES: "Event responses",
        EXTERNAL: "External",
        LEAD_GENERATION: "Lead generation",
        LINK_CLICKS: "Link clicks",
        LOCAL_AWARENESS: "Local awareness",
        MOBILE_APP_ENGAGEMENT: "Mobile app engagement",
        MOBILE_APP_INSTALLS: "Mobile app installs",
        OFFER_CLAIMS: "Offer claims",
        PAGE_LIKES: "Page likes",
        POST_ENGAGEMENT: "Post engagement",
        PRODUCT_CATALOG_SALES: "Product catalog sales",
        VIDEO_VIEWS: "Video views"
    };

    service.statuses = {
        ACTIVE: "Active",
        PAUSED: "Paused",
        ARCHIVED: "Archived",
        DELETED: "Deleted",
        CAMPAIGN_PAUSED: "Campaign paused",
        ADSET_PAUSED: "Ad set paused",
        PENDING_REVIEW: "Pending review",
        DISAPPROVED: "Disapproved",
        PREAPPROVED: "Preapproved",
        PENDING_BILLING_INFO: "Pending billing info"
    };

    service.buyingTypes = {
        AUCTION: "Auction",
        RESERVED: "Reserved"
    };

    service.billingEvents = {
        APP_INSTALLS: "App installs",
        CLICKS: "Clicks",
        IMPRESSIONS: "Impressions",
        LINK_CLICKS: "Link clicks",
        OFFER_CLAIMS: "Offer claims",
        PAGE_LIKES: "Page likes",
        POST_ENGAGEMENT: "Post engagement",
        VIDEO_VIEWS: "Video views"
    };

    service.optimizationGoals = {
        NONE: "None",
        APP_INSTALLS: "App installs",
        BRAND_AWARENESS: "Brand awareness",
        CLICKS: "Clicks",
        ENGAGED_USERS: "Engaged users",
        EXTERNAL: "External",
        EVENT_RESPONSES: "Event responses",
        IMPRESSIONS: "Impressions",
        LINK_CLICKS: "Link clicks",
        OFFER_CLAIMS: "Offer claims",
        OFFSITE_CONVERSIONS: "Offsite conversions",
        PAGE_ENGAGEMENT: "Page engagement",
        PAGE_LIKES: "Page likes",
        POST_ENGAGEMENT: "Post engagement",
        REACH: "Reach",
        SOCIAL_IMPRESSIONS: "Social impressions",
        VIDEO_VIEWS: "Video views"
    };

    service.productAdBehaviors = {
        REQUIRE_LAST_SEEN_PRODUCTS: "Require last seen products",
        REQUIRE_AVAILABLE_LAST_SEEN_PRODUCTS: "Require available last seen products",
        FALL_BACK_TO_FB_RECOMMENDATIONS: "Fall back to Facebook recommendations"
    };

    service.bidInfoActions = {
        ACTIONS: "Actions",
        CLICKS: "Clicks",
        REACH: "Reach"
    };

    return service;
}]);
'use strict';

angular.module('modCommon').factory('Facebook', ['$q', 'Loading', function ($q, Loading) {
    var service = {};

    service.get = get;
    service.login = login;
    service.logout = logout;
    service.getLoginStatus = getLoginStatus;

    return service;

    function get(url, params) {
        var deferred = $q.defer();
        Loading.set(true, 'facebookrequest');
        FB.api(url, params, function (response) {
            if (!response || response.error) {
                Loading.set(false, 'facebookrequest');
                deferred.reject(response.error);
            } else {
                Loading.set(false, 'facebookrequest');
                deferred.resolve(response);
            }
        });
        return deferred.promise;
    }

    function login() {
        var deferred = $q.defer();
        Loading.set(true, 'facebookrequest');
        FB.login(function (response) {
            if (!response || response.error) {
                Loading.set(false, 'facebookrequest');
                deferred.reject(response.error);
            } else {
                Loading.set(false, 'facebookrequest');
                deferred.resolve(response);
            }
        }, {
            scope: 'publish_actions,manage_pages,email,public_profile,publish_pages,user_friends,ads_read,ads_management'
        });
        return deferred.promise;
    }

    function logout() {
        var deferred = $q.defer();
        Loading.set(true, 'facebookrequest');
        FB.logout(function (response) {
            if (!response || response.error) {
                Loading.set(false, 'facebookrequest');
                deferred.reject(response.error);
            } else {
                Loading.set(false, 'facebookrequest');
                deferred.resolve(response);
            }
        });
        return deferred.promise;
    }

    function getLoginStatus() {
        var deferred = $q.defer();
        Loading.set(true, 'facebookrequest');
        FB.getLoginStatus(function (response) {
            if (!response || response.error) {
                Loading.set(false, 'facebookrequest');
                deferred.reject(response.error);
            } else {
                Loading.set(false, 'facebookrequest');
                deferred.resolve(response);
            }
        });
        return deferred.promise;
    }
}]);
'use strict';

angular.module('modCommon').factory('Loading', [function () {
    var service = {};
    service.status = true;
    service.queue = 0;
    service.endpoints = {};

    service.set = function (boolean, url) {
        var aryUrl = url.split('?')[0].split("/");
        var aryUrlCopy = angular.copy(aryUrl);

        // Clean the URL
        aryUrlCopy = aryUrl.filter(function (item) {
            return item.length <= 30 && item.indexOf("act_") === -1 && isNaN(item);
        });

        var dataEndpoint = aryUrlCopy.join("");

        // Ignore html template requests
        if (dataEndpoint.indexOf(".html") !== -1) {
            return;
        }
        // Do not add these endpoints to the loading queue
        if (dataEndpoint === "apiusersfeed") return;

        // Set defaults if we've never seen this before
        if (!angular.isDefined(service.endpoints[dataEndpoint])) service.endpoints[dataEndpoint] = {};
        if (isNaN(service.endpoints[dataEndpoint].queue)) service.endpoints[dataEndpoint].queue = 0;
        if (typeof service.endpoints[dataEndpoint].status !== 'boolean') service.endpoints[dataEndpoint].status = true;

        // Modify loading queue
        if (boolean === true) {
            //console.log(dataEndpoint);
            service.endpoints[dataEndpoint].queue++;
            service.queue++;
        } else {
            service.endpoints[dataEndpoint].queue--;
            service.queue--;
        }

        // Endpoint specific loading
        service.endpoints[dataEndpoint].status = service.endpoints[dataEndpoint].queue > 0;
        // Total loading
        service.status = service.queue > 0;
    };

    service.get = function (file) {
        if (file !== 'All') {
            if (angular.isDefined(service.endpoints[file])) {
                return service.endpoints[file].status;
            } else {
                return false;
            }
        } else {
            return service.status;
        }
    };

    return service;
}]);
'use strict';

angular.module('modCommon').factory('Navigation', [function () {
    var service = {};
    service.active = "";

    service.all = [{ name: "Dashboard", icon: "fa-area-chart", url: "/", children: [] }, { name: "Campaigns", icon: "fa-bullhorn", url: "/campaigns", children: [] }, { name: "Ad Sets", icon: "fa-folder-open-o", url: "/ad-sets", children: [] }, { name: "Ads", icon: "fa-image", url: "/ads", children: [] }, { name: "Tracking", icon: "fa-bullseye", url: "/tracking", children: [] }, { name: "Preset Audiences", icon: "fa-users", url: "/preset-audiences", children: [] }, { name: "Preset Ad Groups ", icon: "fa-files-o", url: "/preset-ad-groups", children: [] }, { name: "Automation", icon: "fa-gears", url: "/automation", children: [] }, { name: "Help", icon: "fa-question-circle", url: "/help", children: [] }];

    return service;
}]);
'use strict';

angular.module('modCommon').factory('User', [function () {
    var service = {};

    service.accessToken = "";
    service.userID = "";
    service.name = "";
    service.firstName = "";
    service.lastName = "";
    service.name = "";
    service.picture = "";
    service.authenticated = false;

    service.setUserInfo = setUserInfo;
    service.clearUserInfo = clearUserInfo;

    return service;

    function setUserInfo(loginInfo, userInfo) {
        service.authenticated = true;

        if (loginInfo) {
            if (loginInfo.accessToken) service.accessToken = loginInfo.accessToken;
            if (loginInfo.userID) service.userID = loginInfo.userID;
        }
        if (userInfo) {
            if (userInfo.name) service.name = userInfo.name;
            if (userInfo.first_name) service.firstName = userInfo.first_name;
            if (userInfo.last_name) service.lastName = userInfo.last_name;
            if (userInfo.picture && userInfo.picture.data && userInfo.picture.data.url) service.picture = userInfo.picture.data.url;
        }
    }

    function clearUserInfo() {
        service.accessToken = "";
        service.userID = "";
        service.name = "";
        service.firstName = "";
        service.lastName = "";
        service.picture = "";
        service.authenticated = false;
    }
}]);
'use strict';

angular.module('modCommon').factory('Version', ['$http', function ($http) {
    var service = {};

    service.get = get;

    return service;

    function get() {
        return $http.get('/version.json').then(function (response) {
            return response.data;
        });
    }
}]);
'use strict';

var modHelp = angular.module('modHelp', ['modCommon']);

modHelp.controller('ctrlHelp', [function () {}]);
'use strict';

var modDashboard = angular.module('modDashboard');

modDashboard.controller('ctrlDashboard', ['$q', '$timeout', 'Dashboard', 'EstimateTimeToCompletion', 'Accounts', 'Loading', function ($q, $timeout, Dashboard, EstimateTimeToCompletion, Accounts, Loading) {
    var vm = this;

    var defaultReport = {
        data: [],
        summary: {}
    };

    vm.accounts = [];
    vm.startDate = moment().subtract(7, 'days').startOf('day').format('YYYY-MM-DD');
    vm.endDate = moment().endOf('day').format('YYYY-MM-DD');

    vm.getCurrency = getCurrency;
    vm.getNumber = getNumber;
    vm.selectAccount = selectAccount;

    _init();

    function _init() {
        Accounts.getAll().then(function (accounts) {
            if (accounts && accounts.length > 0) {
                vm.accounts = accounts;
                _getAccountInsights();
            }
        });
    }

    function _getAccountInsights() {
        var startTime = Date.now() / 1000 | 0;

        var _loop = function _loop(i) {
            Dashboard.generateReport(vm.accounts[i].id, vm.startDate, vm.endDate).then(function (report) {
                if (report.report_run_id) {
                    _checkReportStatus(report.report_run_id, vm.accounts[i].id);
                }
            }, function (error) {
                Object.assign(vm.accounts[i], _processInsights(defaultReport));
                vm.accounts[i].error = error.message;
            });
        };

        for (var i = 0; i < vm.accounts.length; i++) {
            _loop(i);
        }

        function _checkReportStatus(asyncReportId, accountId, delay) {
            Loading.set(true, 'asyncstatus');
            var currentTime = Date.now() / 1000 | 0;
            if (!delay) delay = 2000;
            $timeout(function () {
                Dashboard.checkReportStatus(asyncReportId).then(function (status) {
                    if (status.async_status === "Job Completed") {
                        Loading.set(false, 'asyncstatus');
                        _fetchAsyncReport(asyncReportId, accountId);
                    } else {
                        delay = EstimateTimeToCompletion.get(startTime, currentTime, status.async_percent_completion);
                        Loading.set(false, 'asyncstatus');
                        _checkReportStatus(asyncReportId, accountId, delay);
                    }
                }, function (error) {
                    Loading.set(false, 'asyncstatus');
                });
            }, delay);
        }

        function _fetchAsyncReport(asyncReportId, accountId) {
            Dashboard.fetchAsyncReport(asyncReportId).then(function (report) {
                if (report && report.summary && report.summary.account_id) {
                    Object.assign(vm.accounts.find(function (account) {
                        return account.id === accountId;
                    }), _processInsights(report));
                } else {
                    Object.assign(vm.accounts.find(function (account) {
                        return account.id === accountId;
                    }), _processInsights(defaultReport));
                }
            });
        }
    }

    function _processInsights(input) {
        var currentDate = "";
        var foundDate = {};
        var days = moment(vm.endDate).diff(moment(vm.startDate), 'days');
        var output = input;
        var aryDates = [];

        for (var i = 0; i < days; i++) {
            currentDate = moment(vm.startDate).add(i, 'days').format('YYYY-MM-DD');

            foundDate = input.data.find(function (date) {
                return date.date_start === currentDate;
            });

            if (foundDate) {
                aryDates.push([currentDate, foundDate.spend]);
            } else {
                aryDates.push([currentDate, 0]);
            }
        }

        output.data = aryDates;

        if (!output.summary) {
            output.summary = {
                impressions: 0,
                reach: 0,
                spend: 0
            };
        }

        return output;
    }

    function getCurrency(insights, col) {
        var output = 0;

        if (insights && insights.summary && insights.summary[col] && insights.summary[col] !== 0) output = insights.summary[col];

        return output;
    }

    function getNumber(insights, col) {
        var output = 0;

        if (insights && insights.summary && insights.summary[col]) output = insights.summary[col];

        return output;
    }

    function selectAccount(account) {
        Accounts.setActive(account.id);
    }
}]);
'use strict';

(function () {
    'use strict';

    var modPresetAdGroups = angular.module('modPresetAdGroups', ['modCommon']);

    modPresetAdGroups.controller('ctrlPresetAdGroups', [function () {}]);
})();
'use strict';

var modTracking = angular.module('modTracking', ['modCommon']);

modTracking.controller('ctrlTracking', [function () {}]);
'use strict';

var modPresetAudiences = angular.module('modPresetAudiences', ['modCommon']);

modPresetAudiences.controller('ctrlPresetAudiences', [function () {}]);